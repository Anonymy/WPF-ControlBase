<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">

    <!--  FButton模板  -->
    <ControlTemplate x:Key="S.FButton.Template.Default" TargetType="{x:Type local:FButton}">
        <Grid>
            <Border x:Name="border"
                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"
                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}"
                    Opacity="{TemplateBinding Opacity}" />

            <Grid x:Name="grid" RenderTransformOrigin="0.5,0.5">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>

                <!--  Icon/Text  -->
                <StackPanel Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="Center"
                            Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Orientation}">

                    <TextBlock x:Name="icon"
                               Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconSize}"
                               FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IconFontWeight}"
                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                               RenderTransformOrigin="0.5,0.5"
                               Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Icon}">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0" />
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <Label x:Name="txt"
                           VerticalAlignment="Center"
                           Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                           FontSize="{TemplateBinding FontSize}"
                           Foreground="{TemplateBinding Foreground}" />

                    <!--<TextBlock VerticalAlignment="Center"  x:Name="txt"
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}"
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}"
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />-->
                </StackPanel>
            </Grid>

            <ProgressBar Height="Auto"
                         Background="Transparent"
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         Foreground="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                         IsIndeterminate="True"
                         Opacity="0.5"
                         Visibility="{TemplateBinding h:Cattach.IsBuzy,
                                                      Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">

                <ProgressBar.Clip>
                    <RectangleGeometry RadiusX="{TemplateBinding h:Cattach.CornerRadius}" RadiusY="{TemplateBinding h:Cattach.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52" />
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>
        <!--</Border>-->
        <!--  触发器  -->
        <ControlTemplate.Triggers>
            <!--  设置鼠标进入时的背景、前景样式  -->
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverBackground}" />
                <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverBorderBrush}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}" />
                <Setter TargetName="txt" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.8"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!--  Ficon的动画触发器  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="AllowsAnimation" Value="true" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="180"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <!--  鼠标按下时的前景、背景样式  -->
            <Trigger Property="IsPressed" Value="True">
                <!--<Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=PressedBackground}" TargetName="border" />-->
                <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedBorderBrush}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}" />
                <Setter TargetName="txt" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}" />
                <!--<Setter Property="Margin" Value="0,3,0,0" TargetName="grid"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>

            <Trigger Property="h:Cattach.IsBuzy" Value="true">
                <Setter TargetName="txt" Property="Content" Value="{Binding Path=(h:Cattach.BuzyText), RelativeSource={RelativeSource TemplatedParent}}" />
                <Setter Property="IsEnabled" Value="False" />
            </Trigger>

            <Trigger Property="Content" Value="">
                <Setter TargetName="txt" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter TargetName="txt" Property="Visibility" Value="Collapsed" />
            </Trigger>

            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="icon" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  默认按钮样式  -->
    <Style x:Key="S.FButton.Style.Default" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="PressedBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity5}}" />
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="120" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.Default}" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0" />
        <Setter Property="Icon" Value="" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <!--<Setter Property="Background">
            <Setter.Value>
        -->
        <!--  Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}"  -->
        <!--
                <LinearGradientBrush StartPoint="0 0" EndPoint="0 1">
                    <GradientStop Color="{DynamicResource AccentColor}" Offset="0" />
                    <GradientStop Color="White" Offset="0.2"/>
                    <GradientStop Color="{DynamicResource AccentColor}" Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
    </Style>

    <!--  默认样式  -->
    <Style BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}" />

    <!--  默认按钮 - 带图标  -->
    <Style x:Key="S.FButton.Style.Icon" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="FIconMargin" Value="0,0,5,0" />
    </Style>

    <!--  透明按钮  -->
    <Style x:Key="S.FButton.Style.Transparent" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <!--<Setter Property="Height" Value="Auto"/>-->
        <Setter Property="Width" Value="Auto" />
        <Setter Property="FIconMargin" Value="0" />
    </Style>

    <!--  超链接按钮  -->
    <Style x:Key="S.FButton.Style.Link" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.Default}" />
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0" />
        <Setter Property="Icon" Value="" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="ContentDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
    </Style>

    <!--  圆形按钮  -->
    <Style x:Key="S.FButton.Style.Circle" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
    </Style>

    <!--  圆形透明安妮  -->
    <Style x:Key="S.FButton.Style.CircleTransparent" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
        <Setter Property="PressedBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity5}}" />
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
    </Style>

    <!--  圆角按钮  -->
    <Style x:Key="S.FButton.Transparent.BorderBrush" BasedOn="{StaticResource S.FButton.Style.Transparent}" TargetType="{x:Type local:FButton}">
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="PressedBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Gray}}" />
    </Style>

    <!--  圆角按钮  -->
    <Style x:Key="S.FButton.Circle.CornerRadius" BasedOn="{StaticResource S.FButton.Style.Default}" TargetType="{x:Type local:FButton}">
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
    </Style>

    <!--  圆角透明按钮  -->
    <Style x:Key="S.FButton.Circle.CornerRadius.Transparent" BasedOn="{StaticResource S.FButton.Transparent.BorderBrush}" TargetType="{x:Type local:FButton}">
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
    </Style>

    <!--  圆形鼠标MouseOver显示按钮  -->
    <!--  矢量图标按钮默认模板  -->
    <ControlTemplate x:Key="S.FButton.Template.Icon" TargetType="{x:Type local:FButton}">
        <Grid>
            <Border x:Name="border"
                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"
                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}"
                    Opacity="{TemplateBinding Opacity}" />

            <Grid x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>
                <!--  Icon/Text  -->
                <StackPanel Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="Center"
                            Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Orientation}">

                    <TextBlock x:Name="icon"
                               Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconSize}"
                               FontWeight="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IconFontWeight}"
                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                               RenderTransformOrigin="0.5,0.5"
                               Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Icon}">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0" />
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <!--<TextBlock VerticalAlignment="Center"  x:Name="txt"
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}"
                                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}"
                                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" />-->
                </StackPanel>
            </Grid>

            <ProgressBar Background="Transparent"
                         BorderBrush="Transparent"
                         BorderThickness="0"
                         IsIndeterminate="True"
                         Opacity="0.5"
                         Visibility="{TemplateBinding h:Cattach.IsBuzy,
                                                      Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
                <ProgressBar.Clip>
                    <RectangleGeometry RadiusX="{TemplateBinding h:Cattach.CornerRadius}" RadiusY="{TemplateBinding h:Cattach.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52" />
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>
            </ProgressBar>

        </Grid>

        <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=MouseOverForeground}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             To="1.2"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             To="1.2"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.5" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             To="1"
                                             Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="grid"
                                             Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             To="1"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true" />
                    <Condition Property="AllowsAnimation" Value="true" />
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="180"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon"
                                             Storyboard.TargetProperty="Angle"
                                             To="0"
                                             Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}" />
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=PressedForeground}" TargetName="txt"/>-->

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="grid" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>


            <Trigger Property="h:Cattach.IsBuzy" Value="true">

                <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}" />
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=PressedForeground}" TargetName="txt"/>-->

                <!--<Setter Property="Text" Value="{Binding Path=(h:Cattach.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>-->

                <Setter Property="IsEnabled" Value="False" />

            </Trigger>

            <Trigger Property="IsChecked" Value="true">

                <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />

                <Setter TargetName="icon" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />

                <Setter Property="Opacity" Value="1" />

                <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" TargetName="txt"/>-->

                <!--<Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content,Converter={x:Static local:XConverter.SelectTextConverter}}" TargetName="txt"/>-->
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">

                <Setter TargetName="border" Property="Opacity" Value="0.5" />

                <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedBackground}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=PressedForeground}" />
                <!--<Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=PressedForeground}" TargetName="txt"/>-->

            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  平时隐藏 MouseOver显示  -->
    <Style x:Key="S.FButton.Style.MouseOverOpacity" TargetType="{x:Type local:FButton}">
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Black}}" />
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
        <Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="PressedBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <!--<Setter Property="MouseOverForeground" Value="{StaticResource {x:Static h:BrushKeys.Accent}}" />-->
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.Gray}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="Opacity" Value="0.4" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="CornerRadius" Value="50" />
        <Setter Property="FIconSize" Value="20" />
        <Setter Property="Template" Value="{StaticResource S.FButton.Template.Icon}" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,0,0" />
        <Setter Property="Margin" Value="0,2,0,0" />
        <Setter Property="AllowsAnimation" Value="False" />
        <Setter Property="Orientation" Value="Vertical" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="IconFontWeight" Value="Normal" />
    </Style>


    <!--<local:FButton x:Name="btnClose" Width="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" Margin="10,0" FIconSize="15" Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                         MouseOverBackground="Red" MouseOverForeground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"  PressedForeground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                         AllowsAnimation="True"  Icon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}"
                         Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>-->

    <Style x:Key="S.FButton.Close" BasedOn="{StaticResource S.FButton.Style.Transparent}" TargetType="{x:Type local:FButton}">
        <Setter Property="Width" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <!--<Setter Property="MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.Red}}"/>
        <Setter Property="MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"/>-->
        <Setter Property="Icon" Value="&#xe6f4;" />
        <Setter Property="AllowsAnimation" Value="True" />
        <Setter Property="FIconSize" Value="16" />
        <Setter Property="FIconMargin" Value="0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Margin" Value="2" />
        <!--<Setter Property="PressedBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"/>
        <Setter Property="PressedForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"/>-->
    </Style>

    <Style x:Key="S.FButton.Left" BasedOn="{StaticResource S.FButton.Style.MouseOverOpacity}" TargetType="local:FButton">
        <Setter Property="Height" Value="150" />
        <Setter Property="Width" Value="50" />
        <Setter Property="FIconSize" Value="55" />
        <Setter Property="Margin" Value="20,0" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Icon" Value="&#xe9be;" />
        <Setter Property="Command" Value="{x:Static h:CommandService.Prev}" />
    </Style>

    <Style x:Key="S.FButton.Right" BasedOn="{StaticResource S.FButton.Style.MouseOverOpacity}" TargetType="local:FButton">
        <Setter Property="Height" Value="150" />
        <Setter Property="Width" Value="50" />
        <Setter Property="FIconSize" Value="55" />
        <Setter Property="Margin" Value="20,0" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Icon" Value="&#xe9bf;" />
        <Setter Property="Command" Value="{x:Static h:CommandService.Next}" />
    </Style>
</ResourceDictionary>
