<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBoxItem.Default, TypeInTargetAssembly={x:Type local:ComboBoxItemKeys}}" TargetType="ComboBoxItem">
        <!--<Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Height}" />-->
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"/>
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <!--<Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Width="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Weight}" Margin="0,0.5" Background="{TemplateBinding Background}">

                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}" />
                        
                        <Border x:Name="MouseOverBorder"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                IsHitTestVisible="False"
                                Opacity="0" />

                        <Border x:Name="SelectedBorder"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectBackground)}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                IsHitTestVisible="False"
                                Opacity="0" />

                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background"  Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.SelectBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectForeground)}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.MouseOverBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverForeground)}" />
                        </Trigger>-->

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(h:Cattach.MouseOverForeground)}" />
                            <!--<Setter TargetName="border" Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(h:Cattach.MouseOverEffect)}"/>-->
                            <Setter Property="Panel.ZIndex" Value="999"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(h:Cattach.MouseOverEffect)}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=(h:Cattach.SelectEffect)}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="S.Combobox.Tempalte.Default" TargetType="{x:Type ComboBox}">
        <Grid x:Name="PART_Root">

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Bg"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Padding="{TemplateBinding Padding}" Grid.ColumnSpan="8"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                <Border x:Name="boder_mouseover" Grid.ColumnSpan="8"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0"
                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

                <Border x:Name="boder"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectBackground)}"
                    BorderBrush="{TemplateBinding BorderBrush}" Grid.ColumnSpan="8"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0"
                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

                <ContentControl x:Name="Label"
                                Margin="1,1,0,1"
                                Background="{TemplateBinding BorderBrush}"
                                Content="{TemplateBinding h:Cattach.Title}"
                                Foreground="{TemplateBinding Foreground}"
                                IsHitTestVisible="False"
                                IsTabStop="False"
                                Template="{TemplateBinding h:Cattach.TitleTemplate}" />

                <TextBlock x:Name="ficon"
                       Grid.Column="1"
                       Margin="{TemplateBinding h:Cattach.IconMargin}"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       FontSize="{TemplateBinding h:Cattach.IconSize}"
                       Foreground="{TemplateBinding Foreground}"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="{TemplateBinding h:Cattach.Icon}" />

                <Border Grid.Column="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Panel.ZIndex="2">
                    <ContentControl x:Name="PART_AttachContent"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}"
                                    Template="{TemplateBinding h:Cattach.AttachContent}" />
                </Border>

                <Border Grid.Column="4" Width="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" HorizontalAlignment="Center">

                    <ToggleButton x:Name="PART_DropDownToggle"
                                  HorizontalAlignment="Center"
                                  h:Cattach.IconSize="15"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                                  IsTabStop="False"
                                  Style="{DynamicResource {x:Static h:ToggleButtonKeys.ComboBox}}" />
                </Border>

                <ToggleButton Grid.Column="1"
                              Grid.ColumnSpan="55"
                              HorizontalAlignment="Stretch"
                              Background="Transparent"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{x:Null}">
                    <ToggleButton.Template>
                        <ControlTemplate>
                            <Grid Background="Transparent" />
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>

                <Border Grid.Column="2">
                    <TextBlock x:Name="Message"
                               Margin="{TemplateBinding Padding}"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               IsHitTestVisible="False"
                               Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                               Text="{TemplateBinding h:Cattach.Watermark}"
                               TextAlignment="Center"
                               Visibility="Collapsed" />
                </Border>

                <Border Grid.Column="2">
                    <Grid x:Name="ContentSite" Margin="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_SelectedItem"
                                          HorizontalAlignment="Stretch"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="{TemplateBinding Padding}"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 FontFamily="{TemplateBinding FontFamily}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 IsHitTestVisible="True"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 Style="{DynamicResource {x:Static local:TextBoxKeys.Editable}}"
                                 Text="{TemplateBinding Text}"
                                 Visibility="Collapsed" />
                    </Grid>
                </Border>
            </Grid>

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="0">
                <Grid Width="{Binding ActualWidth, ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">
                    <Grid x:Name="grid_auto"
                          Height="Auto"
                          Margin="0,5,0,0"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top">
                        <!--<Path Data="{TemplateBinding h:Cattach.Path}" Stroke="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                          Fill="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" StrokeThickness="1" Height="{Binding ElementName=grid_auto,Path=ActualHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"/>-->

                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBorderBrush)}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                        <Polygon Margin="0,-5,8,0"
                                 HorizontalAlignment="Right"
                                 Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusForeground)}"
                                 FillRule="Nonzero"
                                 Points="0,5 5,0 10,5 0,5"
                                 Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />

                        <ScrollViewer x:Name="DropDownScrollViewer"
                                      Margin="2"
                                      VerticalAlignment="Top"
                                      BorderThickness="0">
                            <ItemsPresenter x:Name="ItemsPresenter" Height="Auto" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>

                    </Grid>

                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Root" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>

            <!--  1.显示水印  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=Self}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
                <!--<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />-->

                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <ToolTip Padding="0"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 StaysOpen="True">
                            <Border Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                    Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                    BorderBrush="Transparent"
                                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                                <TextBlock Margin="10,0"
                                           VerticalAlignment="Center"
                                           FontSize="{DynamicResource {x:Static h:FontSizeKeys.Default}}"
                                           Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                    <Run Text="数据错误 ：" />
                                    <Run Text="{Binding RelativeSource={RelativeSource AncestorType=ToolTip}, Path=PlacementTarget.(Validation.Errors)[0].ErrorContent}" />
                                </TextBlock>
                            </Border>
                        </ToolTip>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate> 
    
    <!--  Dynamic  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Dynamic, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static local:SelectorKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ComboBoxItemKeys.Default}}" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Default}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"/>
        <Style.Triggers>
            <!--  StyleType  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.StyleType)}" Value="Single">
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style BasedOn="{StaticResource {x:Static h:ComboBoxItemKeys.Default}}" TargetType="ComboBoxItem">
                            <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
                            <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
                            <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                        </Style>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.StyleType)}" Value="Accent">
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style BasedOn="{StaticResource {x:Static h:ComboBoxItemKeys.Default}}" TargetType="ComboBoxItem">
                            <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
                            <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                            <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                        </Style>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!--  Default  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Default, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.Default}}" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ComboBoxItemKeys.Default}}" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Default}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Clear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Label, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.LabelClear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

      <!--Single-->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Single, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Single.Clear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Single}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Single.Label, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Single}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Single.LabelClear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Single}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>
    
    
      <!--Accent-->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Accent, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Dynamic}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Accent.Clear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Accent}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Accent.Label, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Accent}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Accent.LabelClear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Accent}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>
</ResourceDictionary>