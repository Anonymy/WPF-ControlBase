<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">


    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBoxItem.Default, TypeInTargetAssembly={x:Type local:ComboBoxItemKeys}}" TargetType="ComboBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Height}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Grid Width="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Weight}" Margin="0,0.5" Background="{TemplateBinding Background}">

                        <!--<Border x:Name="ItemBackground" IsHitTestVisible="False"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Background="{TemplateBinding Background}" />-->

                        <Border x:Name="MouseOverBorder"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                IsHitTestVisible="False"
                                Opacity="0" />

                        <Border x:Name="SelectedBorder"
                                Grid.Column="1"
                                Grid.ColumnSpan="2"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectBackground)}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                IsHitTestVisible="False"
                                Opacity="0" />

                        <ContentPresenter x:Name="contentPresenter"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background"  Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.SelectBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectForeground)}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ItemBackground" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.MouseOverBackground)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverForeground)}" />
                        </Trigger>-->

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MouseOverBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">

                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SelectedBorder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="S.Combobox.Tempalte.Default" TargetType="{x:Type ComboBox}">
        <Grid x:Name="PART_Root">
            <Border x:Name="Bg"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

            <Border x:Name="boder_mouseover"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0.5" />

            <Border x:Name="boder"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0" />
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!--  Label区域  -->
                <ContentControl x:Name="Label"
                                Margin="1,1,0,1"
                                Background="{TemplateBinding BorderBrush}"
                                Content="{TemplateBinding h:Cattach.Label}"
                                Foreground="{TemplateBinding Foreground}"
                                IsHitTestVisible="False"
                                IsTabStop="False"
                                Template="{TemplateBinding h:Cattach.LabelTemplate}" />

                <!--  附加内容区域  -->
                <Border Grid.Column="2"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Panel.ZIndex="2">
                    <ContentControl x:Name="PART_AttachContent"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}"
                                    Template="{TemplateBinding h:Cattach.AttachContent}" />
                </Border>

                <Border Grid.Column="3" Width="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" HorizontalAlignment="Center">
                    <!--  下拉按钮  -->
                    <ToggleButton x:Name="PART_DropDownToggle"
                                  HorizontalAlignment="Center"
                                  h:Cattach.FIconSize="15"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                                  IsTabStop="False"
                                  Style="{DynamicResource ComboToggleButton}" />
                </Border>

                <ToggleButton Grid.Column="1"
                              Grid.ColumnSpan="55"
                              HorizontalAlignment="Stretch"
                              Background="Transparent"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{x:Null}">
                    <ToggleButton.Template>
                        <ControlTemplate>
                            <Grid Background="Transparent" />
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>

                <!--  水印  -->
                <Border Grid.Column="1">
                    <TextBlock x:Name="Message"
                               Margin="{TemplateBinding Padding}"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               IsHitTestVisible="False"
                               Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                               Text="{TemplateBinding h:Cattach.Watermark}"
                               TextAlignment="Center"
                               Visibility="Collapsed" />
                </Border>

                <!--  主内容区域  -->
                <Border Grid.Column="1">
                    <Grid x:Name="ContentSite" Margin="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_SelectedItem"
                                          HorizontalAlignment="Stretch"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          IsHitTestVisible="False"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <!--  文本编辑  -->
                        <TextBox x:Name="PART_EditableTextBox"
                                 Margin="{TemplateBinding Padding}"
                                 HorizontalAlignment="Stretch"
                                 VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                 FontFamily="{TemplateBinding FontFamily}"
                                 FontSize="{TemplateBinding FontSize}"
                                 Foreground="{TemplateBinding Foreground}"
                                 IsHitTestVisible="True"
                                 IsReadOnly="{TemplateBinding IsReadOnly}"
                                 SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                 Style="{DynamicResource EditableTextBoxStyle}"
                                 Text="{TemplateBinding Text}"
                                 Visibility="Collapsed" />
                    </Grid>
                </Border>
            </Grid>

            <!--  弹出下拉控件  -->
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="0">
                <Grid Width="{Binding ActualWidth, ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto"
                          Height="Auto"
                          Margin="0,5,0,0"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top">
                        <!--<Path Data="{TemplateBinding h:Cattach.Path}" Stroke="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                          Fill="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" StrokeThickness="1" Height="{Binding ElementName=grid_auto,Path=ActualHeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="Fill"/>-->

                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                        <Polygon Margin="0,-5,8,0"
                                 HorizontalAlignment="Right"
                                 Fill="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                 FillRule="Nonzero"
                                 Points="0,5 5,0 10,5 0,5"
                                 Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />

                        <ScrollViewer x:Name="DropDownScrollViewer"
                                      Margin="2"
                                      VerticalAlignment="Top"
                                      BorderThickness="0">
                            <ItemsPresenter x:Name="ItemsPresenter" Height="Auto" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>

                    </Grid>

                </Grid>
            </Popup>
        </Grid>
        <!--  触发器  -->
        <ControlTemplate.Triggers>

            <!--  编辑模式  -->
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="PART_Root" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>

            <!--  1.显示水印  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Self}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>

            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <ToolTip Padding="0"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 StaysOpen="True">
                            <Border Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                    Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                    BorderBrush="Transparent"
                                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                                <TextBlock Margin="10,0"
                                           VerticalAlignment="Center"
                                           FontSize="{DynamicResource {x:Static h:FontSizeKeys.Default}}"
                                           Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                    <Run Text="数据错误 ：" />
                                    <Run Text="{Binding RelativeSource={RelativeSource AncestorType=ToolTip}, Path=PlacementTarget.(Validation.Errors)[0].ErrorContent}" />
                                </TextBlock>
                            </Border>
                        </ToolTip>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="S.Combobox.Tempalte.Single" TargetType="{x:Type ComboBox}">
        <Grid x:Name="PART_Root">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Bg"
                        Grid.Column="1"
                        Grid.ColumnSpan="4"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                <Border x:Name="boder_mouseover"
                        Grid.Column="1"
                        Grid.ColumnSpan="4"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0.5" />

                <Border x:Name="boder"
                        Grid.Column="1"
                        Grid.ColumnSpan="4"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0" />

                <!--  Label区域  -->
                <ContentControl x:Name="Label"
                                Margin="1,1,0,1"
                                Background="{TemplateBinding BorderBrush}"
                                Content="{TemplateBinding h:Cattach.Label}"
                                IsHitTestVisible="False"
                                IsTabStop="False"
                                Template="{TemplateBinding h:Cattach.LabelTemplate}" />

                <TextBlock x:Name="ficon"
                           Grid.Column="1"
                           Margin="{TemplateBinding h:Cattach.FIconMargin}"
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontSize="{TemplateBinding h:Cattach.FIconSize}"
                           Foreground="{TemplateBinding Foreground}"
                           Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                           Text="{TemplateBinding h:Cattach.Icon}" />

                <!--  附加内容区域  -->
                <Border Grid.Column="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Panel.ZIndex="2">
                    <ContentControl x:Name="PART_AttachContent"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    Foreground="{TemplateBinding Foreground}"
                                    Template="{TemplateBinding h:Cattach.AttachContent}" />
                </Border>



                <Border Grid.Column="4" Width="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" HorizontalAlignment="Center">
                    <!--  下拉按钮  -->
                    <ToggleButton x:Name="PART_DropDownToggle"
                                  HorizontalAlignment="Center"
                                  h:Cattach.FIconSize="15"
                                  Foreground="{TemplateBinding Foreground}"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                                  IsTabStop="False"
                                  Style="{DynamicResource ComboToggleButton}" />
                </Border>

                <ToggleButton Grid.Column="1"
                              Grid.ColumnSpan="55"
                              HorizontalAlignment="Stretch"
                              Background="Transparent"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Style="{x:Null}">
                    <ToggleButton.Template>
                        <ControlTemplate>
                            <Grid Background="Transparent" />
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>

                <!--  水印  -->
                <Border Grid.Column="2" Margin="{TemplateBinding Padding}">
                    <TextBlock x:Name="Message"
                               Margin="{TemplateBinding Padding}"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               IsHitTestVisible="False"
                               Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                               Text="{TemplateBinding h:Cattach.Watermark}"
                               TextAlignment="Center"
                               Visibility="Collapsed" />
                </Border>

                <!--  主内容区域  -->
                <Grid x:Name="ContentSite" Grid.Column="2" Margin="{TemplateBinding Padding}">
                    <ContentPresenter x:Name="PART_SelectedItem"
                                      HorizontalAlignment="Stretch"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      Content="{TemplateBinding SelectionBoxItem}"
                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="False"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    <!--  文本编辑  -->
                    <TextBox x:Name="PART_EditableTextBox"
                             HorizontalAlignment="Stretch"
                             VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                             Background="Transparent"
                             FontFamily="{TemplateBinding FontFamily}"
                             FontSize="{TemplateBinding FontSize}"
                             Foreground="{TemplateBinding Foreground}"
                             IsHitTestVisible="True"
                             IsReadOnly="{TemplateBinding IsReadOnly}"
                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                             Style="{DynamicResource EditableTextBoxStyle}"
                             Text="{TemplateBinding Text}"
                             Visibility="Collapsed" />
                </Grid>
            </Grid>
            <!--  弹出下拉控件  -->
            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="2">

                <Grid Width="{Binding ActualWidth, ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto"
                          Height="Auto"
                          Margin="0,5,0,0"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top">
                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />

                        <Polygon Margin="0,-5,8,0"
                                 HorizontalAlignment="Right"
                                 Fill="{TemplateBinding BorderBrush}"
                                 FillRule="Nonzero"
                                 Points="0,5 5,0 10,5 0,5"
                                 Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />

                        <ScrollViewer x:Name="DropDownScrollViewer" Margin="2" BorderThickness="0">
                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                        </ScrollViewer>
                    </Grid>

                </Grid>
            </Popup>
        </Grid>
        <!--  触发器  -->
        <ControlTemplate.Triggers>

            <!--  编辑模式  -->
            <Trigger Property="IsEditable" Value="True">
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_SelectedItem" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.Column" Value="3" />
                <Setter TargetName="PART_DropDownToggle" Property="Grid.ColumnSpan" Value="1" />
                <Setter TargetName="PART_DropDownToggle" Property="Background" Value="Transparent" />
                <Setter Property="IsTabStop" Value="false" />
                <Setter TargetName="PART_DropDownToggle" Property="Focusable" Value="False" />
            </Trigger>

            <!--  1.显示水印  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <!--<Setter  Property="BorderBrush"  Value="{Binding Path=(h:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter  Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="h:Cattach.FIconMargin" Value="0,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <!--<Setter Property="h:Cattach.FocusBackground" Value="{DynamicResource {x:Static h:BrushKeys.Dark4}}" />-->
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />

        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
        <Setter Property="h:Cattach.FocusBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />

        <Setter Property="Padding" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_2_0}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ComboBoxItemKeys.Default}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MaxDropDownHeight" Value="400" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <!--<Setter Property="h:Cattach.Path" Value="{StaticResource S.Geometry.Rectangle.Rounded.TopRight}"/>-->
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Default}" />
        <Setter Property="RenderTransform" Value="{StaticResource {x:Static h:SystemKeys.TransformGroup}}" />

        <Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />
        <Setter Property="h:Cattach.FIconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Default}}" />
        <Setter Property="h:Cattach.FIconMargin" Value="5,0,0,0" />
        <Setter Property="h:Cattach.Label" Value="Label" />
        <Setter Property="h:Cattach.TitleMargin" Value="0" />
        <Setter Property="h:Cattach.TitleWidth" Value="{DynamicResource {x:Static h:SystemKeys.TitleWidth}}" />
        <Setter Property="h:Cattach.TitleBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.Watermark" Value="h:Cattach.Watermark " />

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Default, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Single, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Single}" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleBackground" Value="Transparent" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static h:ComboBoxItemKeys.Default}}" TargetType="ComboBoxItem">
                    <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
                    <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
                    <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Accent, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Default}}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template" Value="{StaticResource S.Combobox.Tempalte.Single}" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundTitle}}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Static h:ComboBoxItemKeys.Default}}" TargetType="ComboBoxItem">
                    <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
                    <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                    <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                    <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Clear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Default}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton Margin="0,0,-2,0"
                                   h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   AllowsAnimation="True"
                                   Command="h:Cattach.ClearTextCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                                   Cursor="Arrow"
                                   FIconMargin="0"
                                   FIconSize="14"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe6f4;"
                                   IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                                   IsTabStop="False"
                                   Style="{DynamicResource S.FButton.Style.Transparent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Label.Default, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Default}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.LabelTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Width="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(h:Cattach.TitleWidth)}" Background="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(h:Cattach.TitleBackground)}" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.Left}}">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(h:Cattach.TitleForeground)}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.LabelClear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.LabelDefault}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<local:FButton Icon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" IsTabStop="False" FIconMargin="0"
                               h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   Command="h:Cattach.ClearTextCommand"
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                                   IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                        Converter={x:Static h:XConverter.TrueToFalseConverter},Mode=OneWay}"  HorizontalAlignment="Center"
                               Margin="0,0,-2,0" FIconSize="14" Foreground="{TemplateBinding Foreground}"  Cursor="Arrow"/>-->

                    <Button Margin="0,0,-10,0"
                            HorizontalAlignment="Center"
                            h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                            Cursor="Arrow"
                            Foreground="{TemplateBinding Foreground}"
                            IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Clear}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Label.Single, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.LabelDefault}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleBackground" Value="Transparent" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Label.Accent, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.LabelDefault}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.TitleBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Label.SingleClear, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.LabelSingle}}" TargetType="{x:Type ComboBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <Grid>
                        <!--<local:FButton Icon="&#xe6f4;" Style="{DynamicResource S.FButton.Style.Transparent}" IsTabStop="False" FIconMargin="0"
                               h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                               Command="h:Cattach.ClearTextCommand" Visibility="Collapsed"
                               CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}}}"
                               IsEnabled="{Binding Path=IsReadOnly,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type ComboBox}},
                               Converter={x:Static h:XConverter.TrueToFalseConverter},Mode=OneWay}" HorizontalAlignment="Center"
                               Margin="0,0,0,0" FIconSize="14" Foreground="{TemplateBinding Foreground}" Cursor="Arrow"/>-->

                        <Button Margin="0,0,-10,0"
                                HorizontalAlignment="Center"
                                h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                Command="h:Cattach.ClearTextCommand"
                                CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}}"
                                Cursor="Arrow"
                                Foreground="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=Foreground}"
                                IsEnabled="{Binding Path=IsReadOnly, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ComboBox}}, Converter={x:Static h:XConverter.TrueToFalseConverter}, Mode=OneWay}"
                                Style="{DynamicResource {x:Static local:ButtonKeys.Clear}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Circle, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.Default}}" TargetType="{x:Type ComboBox}">
        <Setter Property="IsEditable" Value="False" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ComboBox.Circle.Label, TypeInTargetAssembly={x:Type local:ComboBoxKeys}}" BasedOn="{StaticResource {x:Static h:ComboBoxKeys.LabelDefault}}" TargetType="{x:Type ComboBox}">
        <Setter Property="IsEditable" Value="False" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.LabelTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="Transparent">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>