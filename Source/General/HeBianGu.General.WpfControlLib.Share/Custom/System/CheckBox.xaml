<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="S.CheckBox.Tempalte.Default" TargetType="{x:Type CheckBox}">
        <Grid x:Name="grid" Margin="{TemplateBinding Padding}" VerticalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <ContentControl x:Name="Label" Background="{TemplateBinding BorderBrush}"
                                        Content="{TemplateBinding h:Cattach.Title}"
                                        IsHitTestVisible="False"
                                        IsTabStop="False"
                                        Template="{TemplateBinding h:Cattach.TitleTemplate}" />

            <DockPanel x:Name="dp_center" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Grid.Column="1" TextElement.Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Foreground}"
                                   RenderTransform="{StaticResource {x:Static h:SystemKeys.TransformGroup}}"
                                   RenderTransformOrigin="0.5,0.5">
                <TextBlock x:Name="icon"
                                       Grid.Column="2"
                                       Margin="{TemplateBinding h:Cattach.IconMargin}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       FontSize="{TemplateBinding h:Cattach.IconSize}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}" />
                <ContentPresenter Grid.Column="3" Margin="{TemplateBinding Padding}"/>
            </DockPanel>

        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />
                <Setter TargetName="icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedText)}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectForeground)}" />
            </Trigger>

            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UnSelectedText)}" />
            </Trigger>

            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.NoneSelectedText)}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />
                <Setter TargetName="icon" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverForeground)}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dp_center" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.55" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dp_center" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.55" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dp_center" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="dp_center" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Dynamic, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource S.ToggleButton.Dynamic}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.SelectedText" Value="&#xe624;" />
        <Setter Property="h:Cattach.UnSelectedText" Value="&#xe6ac;" />
        <Setter Property="h:Cattach.NoneSelectedText" Value="&#xe62b;" />
        <Setter Property="Template" Value="{StaticResource S.CheckBox.Tempalte.Default}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Default, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Dynamic}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Label, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Dynamic}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Single, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Default}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Single.Label, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Single}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.IconSize" Value="25" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Accent, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Default}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Accent.Label, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Accent}}" TargetType="{x:Type CheckBox}">
        <Setter Property="h:Cattach.IconSize" Value="25" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}"/>
    </Style>

    <ControlTemplate x:Key="S.CheckBox.Tempate.Box" TargetType="{x:Type CheckBox}">
        <Grid Background="Transparent">
            <Border x:Name="border" HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                <ContentPresenter x:Name="con"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RenderTransform="{StaticResource {x:Static h:SystemKeys.TransformGroup}}"
                                              RenderTransformOrigin="0.5,0.5"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>

            <TextBlock x:Name="checkState"
                                   Margin="0,0,-4,-8"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Bottom"
                                   FontSize="25"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="&#xe627;"
                                   Visibility="Collapsed" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="checkState" Property="Visibility" Value="Visible" />
                <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.SelectForeground)}" />
                <Setter TargetName="checkState" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.SelectForeground)}" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectForeground)}" />
                <Setter Property="BorderThickness" Value="1.3" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="true">
                <!--<Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.MouseOverBorderBrush)}" />
                <Setter TargetName="checkState" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.MouseOverForeground)}" />-->
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverForeground)}" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="con" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="con" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="con" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="con" Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Box, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource S.ToggleButton.Dynamic}" TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource S.CheckBox.Tempate.Box}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Box.Single, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Default}}" TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource S.CheckBox.Tempate.Box}"/>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.CheckBox.Box.Accent, TypeInTargetAssembly={x:Type local:CheckBoxKeys}}" BasedOn="{StaticResource {x:Static local:CheckBoxKeys.Default}}" TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource S.CheckBox.Tempate.Box}"/>
    </Style>

</ResourceDictionary>