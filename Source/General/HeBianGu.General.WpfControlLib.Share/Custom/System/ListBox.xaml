<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <ControlTemplate x:Key="ListBox_DownToUp" TargetType="{x:Type ListBox}">
        <Grid>
            <Grid.RenderTransform>
                <TransformGroup>
                    <ScaleTransform />
                    <SkewTransform />
                    <RotateTransform />
                    <TranslateTransform />
                </TransformGroup>
            </Grid.RenderTransform>

            <StackPanel IsItemsHost="True" />

            <Grid.Triggers>
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard Storyboard="{StaticResource S.Storyboard.Load.OpacityDownToUp}" />
                </EventTrigger>
            </Grid.Triggers>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ListBox_Buzy" TargetType="{x:Type ListBox}">
        <Grid>
            <local:FScrollView>
                <StackPanel IsItemsHost="True" />
            </local:FScrollView>
            <local:WaitingBox IsBusy="{TemplateBinding h:Cattach.IsBuzy}" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Dynamic, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static local:SelectorKeys.Dynamic}}" TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="h:Cattach.Bool" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.Default}}" />
        <Setter Property="h:Cattach.Title" Value="Label" />
        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.TitleMargin" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" />
        <Setter Property="h:Cattach.TitleWidth" Value="{DynamicResource {x:Static h:SystemKeys.TitleWidth}}" />
        <Setter Property="h:Cattach.CellMargin" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <!--  Label区域  -->
                        <ContentControl x:Name="Label"
                                        Margin="1,1,0,1"
                                        Background="{TemplateBinding BorderBrush}"
                                        Content="{TemplateBinding h:Cattach.Title}"
                                        IsHitTestVisible="False"
                                        IsTabStop="False"
                                        Template="{TemplateBinding h:Cattach.TitleTemplate}" />

                        <Border Grid.Column="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}">
                            <local:FScrollView>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </local:FScrollView>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Default, TypeInTargetAssembly={x:Type local:ListBoxKeys}}"  BasedOn="{StaticResource {x:Static h:ListBoxKeys.Dynamic}}" TargetType="ListBox">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Single, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Default}}" TargetType="ListBox">
        <!--<Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.Single}}" />-->
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Accent, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Default}}" TargetType="ListBox">
        <!--<Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.Accent}}" />-->
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Clear, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Single}}" TargetType="ListBox">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.Clear}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.Label, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Dynamic}}" TargetType="{x:Type ListBox}">
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.CheckBoxBox}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
   
    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.WrapPanelSelecter.CheckBox, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.WithBorder}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.WrapPanelSelecter.Default, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.CheckBoxBox}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  带有流动效果  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.FluidMoveBehavior, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" TargetType="ListBox">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}"
                            SnapsToDevicePixels="true">
                        <local:FScrollView Padding="{TemplateBinding Padding}" Focusable="false">
                            <ItemsPresenter Height="Auto" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <h:Interaction.Behaviors>
                                    <h:FluidMoveBehavior AppliesTo="Self" FloatAbove="True" Duration="00:00:01" />
                                </h:Interaction.Behaviors>
                            </ItemsPresenter>
                        </local:FScrollView>
                    </Border>
                    <!--<ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border x:Name="boder">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <local:FScrollView>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </local:FScrollView>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  多选效果  -->
    <!--
    <Style x:Key="S.ListBox.MultipleSelect.Default" TargetType="ListBox" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Default}}">
    -->
    <!--<Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>-->
    <!--
        <Setter Property="SelectionMode" Value="Multiple"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>-->

    <!--  可以拖拽的样式  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.AllowDrag, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Default}}" TargetType="ListBox">
        <Setter Property="h:Cattach.Behaviors">
            <Setter.Value>
                <h:Behaviors>
                    <h:ListDropBlendBehavior />
                </h:Behaviors>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource S.ListBoxItem.AllowDrop}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.InnerSource.AddClose, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Clear}}" TargetType="ListBox">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <Grid Margin="10,6">
                                    <ContentPresenter />
                                    <Button x:Name="bt" Style="{DynamicResource {x:Static local:ButtonKeys.CloseFlag}}">
                                        <h:Interaction.Behaviors>
                                            <h:RemoveItemButtonBehavior Item="{Binding}" ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Path=(h:ItemsControlService.InnerSource)}" />
                                        </h:Interaction.Behaviors>
                                    </Button>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="False">
                                        <Setter TargetName="bt" Property="Visibility" Value="Collapsed" />
                                    </Trigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Converter={x:Static h:XConverter.IsLastItemInContainerConverter}}" Value="True">
                                        <Setter TargetName="bt" Property="Visibility" Value="Collapsed" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="h:ItemsControlService.EndTool">
            <Setter.Value>
                <Button Margin="-10" Style="{DynamicResource {x:Static local:ButtonKeys.AddTransparentBorder}}">
                    <h:Interaction.Behaviors>
                        <h:AddItemButtonBehavior ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Path=(h:ItemsControlService.InnerSource)}" />
                        <h:SelectListBoxItemElementBehavior />
                    </h:Interaction.Behaviors>
                </Button>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.InnerSource.CheckAll, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Clear}}" TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Multiple" />
        <Setter Property="h:ItemsControlService.HomeTool">
            <Setter.Value>
                <CheckBox Content="全选" Style="{DynamicResource {x:Static h:CheckBoxKeys.Box}}">
                    <h:Interaction.Behaviors>
                        <h:ListBoxSelectAllCheckBoxBehavior ListBox="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                    </h:Interaction.Behaviors>
                </CheckBox>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBox.All, TypeInTargetAssembly={x:Type local:ListBoxKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxKeys.Single}}" TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Multiple" />
        <Setter Property="h:ItemsControlService.HomeTool">
            <Setter.Value>
                <CheckBox Content="全选" Style="{DynamicResource {x:Static h:CheckBoxKeys.Box}}">
                    <h:Interaction.Behaviors>
                        <h:ListBoxSelectAllCheckBoxBehavior ListBox="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                    </h:Interaction.Behaviors>
                </CheckBox>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static h:ListBoxItemKeys.CheckAll}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <DockPanel>
                        <DockPanel DockPanel.Dock="Top" LastChildFill="False">
                            <CheckBox Content="全选">
                                <h:Interaction.Behaviors>
                                    <h:ListBoxSelectAllCheckBoxBehavior ListBox="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                                </h:Interaction.Behaviors>
                            </CheckBox>

                            <Button Content="添加" DockPanel.Dock="Right" Style="{DynamicResource {x:Static local:ButtonKeys.Add}}">
                                <h:Interaction.Behaviors>
                                    <h:AddItemButtonBehavior ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ItemsSource}" />
                                </h:Interaction.Behaviors>
                            </Button>

                            <Button Content="清空" DockPanel.Dock="Right" Style="{DynamicResource {x:Static local:ButtonKeys.Delete}}">
                                <h:Interaction.Behaviors>
                                    <h:ClearItemButtonBehavior ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ItemsSource}" />
                                </h:Interaction.Behaviors>
                            </Button>

                            <Button Content="删除选中" Style="{DynamicResource {x:Static local:ButtonKeys.Delete}}">
                                <h:Interaction.Behaviors>
                                    <h:RemoveAllCheckedItemButtonBehavior ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=ItemsSource}" ListBox="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                                </h:Interaction.Behaviors>
                            </Button>
                        </DockPanel>

                        <local:FScrollView>
                            <ItemsPresenter />
                        </local:FScrollView>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

</ResourceDictionary>