<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">

    <local:FTextBoxHistoryConverter x:Key="S.Converter.History" />

    <ControlTemplate x:Key="S.TextBox.Template.Default" TargetType="{x:Type TextBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!--  背景  -->
            <Border x:Name="Bg"
                    Grid.Column="1"
                    Grid.ColumnSpan="8"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

            <!--<Border SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="1" Grid.ColumnSpan="3"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="Transparent" />-->

            <!--  鼠标悬停  -->
            <Border x:Name="boder_mouseover"
                    Grid.Column="1"
                    Grid.ColumnSpan="8"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0.5" />

            <!--  获取焦点  -->
            <Border x:Name="boder"
                    Grid.Column="1"
                    Grid.ColumnSpan="8"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0" />

            <!--  Label区域  -->
            <ContentControl x:Name="Label"
                            Margin="1"
                            Background="Transparent"
                            Content="{TemplateBinding h:Cattach.Label}"
                            Foreground="{TemplateBinding Foreground}"
                            Template="{TemplateBinding h:Cattach.LabelTemplate}" />

            <!--
                Foreground="{TemplateBinding Foreground}"
                Background="{TemplateBinding Background}"
            -->

            <TextBlock x:Name="ficon"
                       Grid.Column="1"
                       Margin="{TemplateBinding h:Cattach.FIconMargin}"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       FontSize="{TemplateBinding h:Cattach.FIconSize}"
                       Foreground="{TemplateBinding Foreground}"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="{TemplateBinding h:Cattach.Icon}" />

            <ContentControl x:Name="title"
                            Grid.Column="1"
                            Content="{TemplateBinding h:Cattach.Title}"
                            Foreground="{TemplateBinding Foreground}"
                            Template="{TemplateBinding h:Cattach.TitleTemplate}" />

            <!--  内容区域  -->
            <ScrollViewer x:Name="PART_ContentHost"
                          Grid.Column="2"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="Stretch"
                          Background="{x:Null}"
                          BorderThickness="0"
                          IsTabStop="False" />
            <!--  水印  -->
            <TextBlock x:Name="Message"
                       Grid.Column="2"
                       Margin="{TemplateBinding Padding}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       Foreground="{TemplateBinding Foreground}"
                       IsHitTestVisible="False"
                       Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                       Text="{TemplateBinding h:Cattach.Watermark}"
                       Visibility="Collapsed" />

            <ToggleButton x:Name="tb_history"
                          Grid.Column="3"
                          IsChecked="{Binding ElementName=PART_Popup_History, Path=IsOpen}"
                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.Rotate90}}"
                          ToolTip="历史记录"
                          Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IsUseHistory), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

            <!--  附加内容区域  -->
            <Border Grid.Column="4" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl x:Name="PART_AttachContent"
                                VerticalAlignment="Top"
                                VerticalContentAlignment="Top"
                                Foreground="{TemplateBinding Foreground}"
                                Template="{TemplateBinding h:Cattach.AttachContent}" />
            </Border>

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsHitTestVisible="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="10"
                   Visibility="Collapsed">

                <Grid Width="{Binding ActualWidth, ElementName=Bg}"
                      MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}"
                      Margin="0,10,0,0"
                      HorizontalAlignment="Stretch">

                    <Polygon Margin="10,-5,8,0"
                             HorizontalAlignment="Right"
                             Fill="{DynamicResource {x:Static h:BrushKeys.Red}}"
                             FillRule="Nonzero"
                             Points="0,5 5,0 10,5 0,5" />

                    <Border MinHeight="{DynamicResource {x:Static h:SystemKeys.RowHeight}}"
                            Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                            CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                            IsHitTestVisible="False">
                        <TextBlock Margin="8,5,8,6"
                                   VerticalAlignment="Center"
                                   Foreground="White"
                                   Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}"
                                   TextWrapping="Wrap" />
                    </Border>
                </Grid>
            </Popup>

            <Popup x:Name="PART_Popup_History"
                   Grid.Column="1"
                   AllowsTransparency="True"
                   Focusable="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   StaysOpen="False"
                   VerticalOffset="0">

                <Grid Width="{Binding ActualWidth, ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto"
                          Height="Auto"
                          Margin="0,5,0,0"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top">
                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                        <Polygon Margin="0,-5,8,0"
                                 HorizontalAlignment="Right"
                                 Fill="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                 FillRule="Nonzero"
                                 Points="0,5 5,0 10,5 0,5"
                                 Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />

                        <ScrollViewer x:Name="DropDownScrollViewer"
                                      Margin="2,3"
                                      VerticalAlignment="Top"
                                      BorderThickness="0">
                            <ListBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.HistoryData)}" SelectedItem="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedHistroyItem)}" />
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </Popup>

        </Grid>

        <ControlTemplate.Triggers>
            <!--  显示水印  -->
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="title" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter  Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="title" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <!--  不可用  -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>
            <!--  只读时，禁用PART_AttachContent  -->
            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="PART_AttachContent" Property="IsEnabled" Value="False" />
                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="False" />
                <Setter TargetName="tb_history" Property="IsEnabled" Value="False" />

                <Setter TargetName="Bg" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
                <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
                <Setter TargetName="ficon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
            </Trigger>

            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <ToolTip Padding="0"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 StaysOpen="True">
                            <Border Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                    Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                    BorderBrush="Transparent"
                                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                                <TextBlock Margin="10,0"
                                           VerticalAlignment="Center"
                                           FontSize="{DynamicResource {x:Static h:FontSizeKeys.Default}}"
                                           Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                    <Run Text="数据错误 ：" />
                                    <Run Text="{Binding RelativeSource={RelativeSource AncestorType=ToolTip}, Path=PlacementTarget.(Validation.Errors)[0].ErrorContent}" />
                                </TextBlock>
                            </Border>
                        </ToolTip>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--  存在异常信息显示异常信息  -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Validation.HasError" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>

                <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                <Setter TargetName="PART_Popup" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!--  启用历史记录显示历史记录  -->
            <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                    <Condition Property="h:Cattach.IsUseHistory" Value="True"/>
                    <Condition Property="(h:Cattach.History" Value="True"/>
                </MultiTrigger.Conditions>

                <Setter Property="IsOpen" Value="True" TargetName="PART_Popup_History"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PART_Popup_History"/>
            </MultiTrigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Default, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" TargetType="{x:Type TextBox}">
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="BorderThickness" Value="1.5" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="MinHeight" Value="26" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />
        <Setter Property="h:Cattach.FIconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Default}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.FIconMargin" Value="5,0,0,0" />
        <Setter Property="Padding" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_2_0}}" />
        <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />-->
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.FocusBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />

        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />

        <Setter Property="h:Cattach.TitleForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Template" Value="{StaticResource S.TextBox.Template.Default}" />
        <Setter Property="RenderTransform" Value="{DynamicResource {x:Static h:SystemKeys.TransformGroup}}" />
        <Setter Property="ClipToBounds" Value="False" />

        <Setter Property="h:Cattach.TitleMargin" Value="{DynamicResource {x:Static h:ThicknessKeys.Margin_10_0}}" />

        <Setter Property="h:Cattach.TitleWidth" Value="{DynamicResource {x:Static h:SystemKeys.TitleWidth}}" />
        <Setter Property="h:Cattach.Label" Value="Label" />
        <Setter Property="h:Cattach.Title" Value="Title" />
        <Setter Property="h:Cattach.Watermark" Value="h:Cattach.Watermark " />
        <!--<Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Vertical">
                        <Border HorizontalAlignment="Center" BorderThickness="1" BorderBrush="Transparent" VerticalAlignment="Top">
                            <Grid>
                                <AdornedElementPlaceholder x:Name="adorner" Margin="-1"/>
                            </Grid>
                        </Border>

                        <Grid x:Name="errorBorder" Opacity="0" HorizontalAlignment="Stretch" Margin="0,10,0,0">

                            <Polygon  HorizontalAlignment="Right" Fill="{DynamicResource {x:Static h:BrushKeys.Red}}"  Points="0,5 5,0 10,5 0,5" Margin="10,-5,8,0" FillRule="Nonzero"/>

                            <Border CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" IsHitTestVisible="False"
                                    Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                    Height="{DynamicResource {x:Static h:SystemKeys.RowHeight}}">
                                <TextBlock Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                                       Foreground="White" Margin="8,5,8,6" TextWrapping="Wrap" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocusWithin" />
                            </DataTrigger.Binding>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard x:Name="fadeInStoryboard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00.25" Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
                                <BeginStoryboard x:Name="fadeOutStoryBoard">
                                    <Storyboard>
                                        <DoubleAnimation Duration="00:00:00.25" Storyboard.TargetName="errorBorder" Storyboard.TargetProperty="Opacity" To="0"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->


        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Vertical">
                        <Border HorizontalAlignment="Center"
                                VerticalAlignment="Top"
                                BorderBrush="Transparent"
                                BorderThickness="1">
                            <Grid>
                                <AdornedElementPlaceholder x:Name="adorner" Margin="-1" />
                            </Grid>
                        </Border>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.Icon" Value="" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="h:Cattach.LabelTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Width="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleWidth)}" Margin="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleMargin)}" Background="Transparent">
                        <TextBlock x:Name="txt"
                                   HorizontalAlignment="Left"
                                   VerticalAlignment="Center"
                                   Background="Transparent"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleForeground)}"
                                   Text="{TemplateBinding Content}"
                                   TextTrimming="CharacterEllipsis" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Label}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.Icon" Value="" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<local:FButton Icon="&#xe6f4;"
                                   Style="{DynamicResource S.FButton.Style.Transparent}"
                                   IsTabStop="False"
                                   FIconMargin="0"
                                   h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   Command="h:Cattach.ClearTextCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                                   Margin="1,3,1,4"
                                   FIconSize="14"
                                   Foreground="{TemplateBinding Foreground}"
                                   Cursor="Arrow"/>-->

                    <Button Width="Auto"
                            h:Cattach.FIconSize="18"
                            h:Cattach.Icon="&#xe701;"
                            h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Clear}}" />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Search, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <Button Width="Auto"
                            h:Cattach.Icon="&#xe787;"
                            h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Transparent}}" />

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushAssist}}" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.Icon" Value="" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Label}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<local:FButton Icon="&#xe6f4;"
                                   Style="{DynamicResource S.FButton.Style.Transparent}"
                                   IsTabStop="False"
                                   FIconMargin="0"
                                   h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                                   Command="h:Cattach.ClearTextCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type TextBox}}}"
                                   Margin="1,3,1,4"
                                   FIconSize="14"
                                   Foreground="{TemplateBinding Foreground}"
                                   Cursor="Arrow"/>-->

                    <Button h:Cattach.IsClearTextButtonBehaviorEnabled="True"
                            Command="h:Cattach.ClearTextCommand"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Clear}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelSingle}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushAssist}}" />
        <Setter Property="h:Cattach.FocusBorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.Icon" Value="" />
    </Style>



    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.UnderLine.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="S.TextBox.UnderLine.Clear" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.UnderLine.LabelClearAlarm, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.LabelTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="Transparent">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   TextTrimming="CharacterEllipsis">
                            <Run Foreground="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleForeground)}" Text="{TemplateBinding Content}" />
                            <Run Foreground="{DynamicResource {x:Static h:BrushKeys.Red}}" Text="*" />
                            <Run Foreground="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleForeground)}" Text="：" />
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.OpenFile, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Label" Value="文件路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton Margin="0,1,0,2"
                                   h:Cattach.IsOpenFileButtonBehaviorEnabled="True"
                                   Command="h:Cattach.OpenFileCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                   Cursor="Arrow"
                                   FIconMargin="0"
                                   FIconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource S.FButton.Style.Transparent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.OpenFolder, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Label" Value="设置路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件夹路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton Margin="0,1,0,2"
                                   VerticalAlignment="Center"
                                   h:Cattach.IsOpenFolderButtonBehaviorEnabled="True"
                                   Command="h:Cattach.OpenFolderCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                   Cursor="Arrow"
                                   FIconMargin="0"
                                   FIconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource S.FButton.Style.Transparent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.SaveFile, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Label" Value="保存路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件保存路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <local:FButton Margin="0,1,0,2"
                                   h:Cattach.IsSaveFileButtonBehaviorEnabled="True"
                                   Command="h:Cattach.SaveFileCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:FTextBox}}}"
                                   Cursor="Arrow"
                                   FIconMargin="0"
                                   FIconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource S.FButton.Style.Transparent}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Inner, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="h:Cattach.Title" Value="标题" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Margin="10,0" Background="Transparent">
                        <TextBlock HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Background="Transparent"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Inner.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="h:Cattach.Title" Value="标题" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Margin="10,0" Background="Transparent">
                        <TextBlock HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Background="Transparent"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>