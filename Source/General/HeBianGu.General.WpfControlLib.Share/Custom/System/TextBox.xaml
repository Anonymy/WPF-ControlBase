<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="S.TextBox.Template.Default" TargetType="{x:Type TextBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <Border x:Name="Bg"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Grid.ColumnSpan="8"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

            <Border x:Name="boder_mouseover"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Grid.ColumnSpan="8"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                    BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBorderBrush)}"
                    BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBorderThickness)}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0"
                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

            <Border x:Name="boder"
                    Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                    Grid.ColumnSpan="8"
                    Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                    BorderBrush="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBorderBrush)}"
                    BorderThickness="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBorderThickness)}"
                    CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                    Opacity="0"
                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

            <ContentControl x:Name="Label"
                            Background="Transparent"
                            Content="{TemplateBinding h:Cattach.Title}"
                            Foreground="{TemplateBinding Foreground}"
                            Template="{TemplateBinding h:Cattach.TitleTemplate}" />

            <TextBlock x:Name="ficon"
                       Grid.Column="1"
                       Margin="{TemplateBinding h:Cattach.IconMargin}"
                       HorizontalAlignment="Center"
                       VerticalAlignment="Center"
                       FontSize="{TemplateBinding h:Cattach.IconSize}"
                       Foreground="{TemplateBinding Foreground}"
                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                       Text="{TemplateBinding h:Cattach.Icon}" />

            <!--<ContentControl x:Name="title"
                            Grid.Column="1"
                            Content="{TemplateBinding h:Cattach.Title}"
                            Foreground="{TemplateBinding Foreground}"
                            Template="{TemplateBinding h:Cattach.TitleTemplate}" />-->


            <ScrollViewer x:Name="PART_ContentHost"
                          Grid.Column="2"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="Stretch"
                          Background="{x:Null}"
                          BorderThickness="0"
                          IsTabStop="False" />

            <TextBlock x:Name="Message"
                       Grid.Column="2"
                       Margin="{TemplateBinding Padding}"
                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                       Foreground="{TemplateBinding Foreground}"
                       IsHitTestVisible="False"
                       Opacity="{DynamicResource {x:Static h:OpacityKeys.Watermark}}"
                       Text="{TemplateBinding h:Cattach.Watermark}"
                       Visibility="Collapsed" />

            <ToggleButton x:Name="tb_history"
                          Grid.Column="3"
                          IsChecked="{Binding ElementName=PART_Popup_History, Path=IsOpen}"
                          Style="{DynamicResource {x:Static h:ToggleButtonKeys.Rotate90}}"
                          ToolTip="历史记录"
                          Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IsUseHistory), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

            <Border Grid.Column="4" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentControl x:Name="PART_AttachContent"
                                VerticalAlignment="Top"
                                VerticalContentAlignment="Top"
                                Foreground="{TemplateBinding Foreground}"
                                Template="{TemplateBinding h:Cattach.AttachContent}" />
            </Border>

            <Popup x:Name="PART_Popup"
                   AllowsTransparency="True"
                   Focusable="False"
                   IsHitTestVisible="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   VerticalOffset="10"
                   Visibility="Collapsed">

                <Grid Width="{Binding ActualWidth, ElementName=Bg}"
                      MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}"
                      Margin="0,10,0,0"
                      HorizontalAlignment="Stretch">

                    <Polygon Margin="10,-5,8,0"
                             HorizontalAlignment="Right"
                             Fill="{DynamicResource {x:Static h:BrushKeys.Red}}"
                             FillRule="Nonzero"
                             Points="0,5 5,0 10,5 0,5" />

                    <Border MinHeight="{DynamicResource {x:Static h:SystemKeys.RowHeight}}"
                            Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                            CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                            IsHitTestVisible="False">
                        <TextBlock Margin="8,5,8,6"
                                   VerticalAlignment="Center"
                                   Foreground="White"
                                   Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(Validation.Errors)[0].ErrorContent}"
                                   TextWrapping="Wrap" />
                    </Border>
                </Grid>
            </Popup>

            <Popup x:Name="PART_Popup_History"
                   Grid.Column="1"
                   AllowsTransparency="True"
                   Focusable="False"
                   Placement="Bottom"
                   PlacementTarget="{Binding ElementName=Bg}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   StaysOpen="False"
                   VerticalOffset="0">

                <Grid Width="{Binding ActualWidth, ElementName=Bg}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}">

                    <Grid x:Name="grid_auto"
                          Height="Auto"
                          Margin="0,5,0,0"
                          HorizontalAlignment="Stretch"
                          VerticalAlignment="Top">
                        <Border Background="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                BorderThickness="1"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
                        <Polygon Margin="0,-5,8,0"
                                 HorizontalAlignment="Right"
                                 Fill="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                 FillRule="Nonzero"
                                 Points="0,5 5,0 10,5 0,5"
                                 Stroke="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />

                        <ScrollViewer x:Name="DropDownScrollViewer"
                                      Margin="2,3"
                                      VerticalAlignment="Top"
                                      BorderThickness="0">
                            <ListBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.HistoryData)}" SelectedItem="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedHistroyItem)}" />
                        </ScrollViewer>
                    </Grid>
                </Grid>
            </Popup>

        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <!--<Setter TargetName="title" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />-->
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter  Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="ficon" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <!--<Setter TargetName="title" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />-->
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>

            <Trigger Property="IsReadOnly" Value="True">
                <Setter TargetName="PART_AttachContent" Property="IsEnabled" Value="False" />
                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="False" />
                <Setter TargetName="tb_history" Property="IsEnabled" Value="False" />

                <Setter TargetName="Bg" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
                <Setter TargetName="PART_ContentHost" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
                <Setter TargetName="ficon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
            </Trigger>

            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Red}}" />
                <Setter Property="ToolTip">
                    <Setter.Value>
                        <ToolTip Padding="0"
                                 Background="Transparent"
                                 BorderThickness="0"
                                 StaysOpen="True">
                            <Border Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                    Background="{DynamicResource {x:Static h:BrushKeys.Red}}"
                                    BorderBrush="Transparent"
                                    CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}">
                                <TextBlock Margin="10,0"
                                           VerticalAlignment="Center"
                                           FontSize="{DynamicResource {x:Static h:FontSizeKeys.Default}}"
                                           Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                    <Run Text="数据错误 ：" />
                                    <Run Text="{Binding RelativeSource={RelativeSource AncestorType=ToolTip}, Path=PlacementTarget.(Validation.Errors)[0].ErrorContent}" />
                                </TextBlock>
                            </Border>
                        </ToolTip>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Validation.HasError" Value="True" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>

                <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                <Setter TargetName="PART_Popup" Property="Visibility" Value="Visible" />
            </MultiTrigger>

            <!--  启用历史记录显示历史记录  -->
            <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="True"/>
                    <Condition Property="h:Cattach.IsUseHistory" Value="True"/>
                    <Condition Property="(h:Cattach.History" Value="True"/>
                </MultiTrigger.Conditions>

                <Setter Property="IsOpen" Value="True" TargetName="PART_Popup_History"/>
                <Setter Property="Visibility" Value="Visible" TargetName="PART_Popup_History"/>
            </MultiTrigger>-->
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="S.TextBox.Template.ErrorTempate">
        <StackPanel Orientation="Vertical">
            <Border HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    BorderBrush="Transparent"
                    BorderThickness="1">
                <Grid>
                    <AdornedElementPlaceholder x:Name="adorner" Margin="-1" />
                </Grid>
            </Border>
        </StackPanel>
    </ControlTemplate>

    <!--  Dynamic  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Dynamic, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource S.TextBoxBase.Dynamic}" TargetType="{x:Type TextBox}">
        <!--<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />-->
        <!--<Setter Property="h:Cattach.Icon" Value="&#xe6ed;" />-->
        <Setter Property="Template" Value="{StaticResource S.TextBox.Template.Default}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource S.TextBox.Template.ErrorTempate}" />
    </Style>

    <!--  Default  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Default, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Single  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Single}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />    
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Single.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelSingle}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Accent  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Accent, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Accent.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Accent}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Accent.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Accent}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Accent.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Accent}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  None  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.None, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseBackground" Value="False" />
        <Setter Property="h:Cattach.UseBorder" Value="False" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.None.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.None}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.None.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.None}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.None.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.None}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Line  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Line, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.LayoutStyle" Value="UnderLine" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Line.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Line}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Line.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Line}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Line.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Line}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Background  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Background, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseBackground" Value="True" />
        <Setter Property="h:Cattach.UseBorder" Value="False" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Background.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Background}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Background.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Background}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Background.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Background}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Border  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.BorderBrush, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseBackground" Value="False" />
        <Setter Property="h:Cattach.UseBorder" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.BorderBrush.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.BorderBrush}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.BorderBrush.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.BorderBrush}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.BorderBrush.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.BorderBrush}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Circle  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Circle, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.LayoutStyle" Value="Circle" />

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Circle.Label, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Circle}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Circle.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Circle}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Circle.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Circle}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseTitle" Value="True" />
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Search, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Dynamic}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.UseClear" Value="True" />
    </Style>

    <!--  Line  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.UnderLine.LabelClear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.UnderLine.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.UnderLine.LabelClearAlarm, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="h:Cattach.CornerRadius" Value="0" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border MinWidth="90" Background="Transparent">
                        <TextBlock Margin="3"
                                   HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   TextTrimming="CharacterEllipsis">
                            <Run Foreground="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleForeground)}" Text="{TemplateBinding Content}" />
                            <Run Foreground="{DynamicResource {x:Static h:BrushKeys.Red}}" Text="*" />
                            <Run Foreground="{Binding RelativeSource={RelativeSource AncestorType=TextBox}, Path=(h:Cattach.TitleForeground)}" Text="：" />
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.OpenFile, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Title" Value="文件路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Margin="0,1,0,2"
                                   h:Cattach.IsOpenFileButtonBehaviorEnabled="True"
                                   Command="h:Cattach.OpenFileCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                   Cursor="Arrow"
                                   IconMargin="0"
                                   IconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />-->

                    <Button Margin="0,1,0,2"
                            VerticalAlignment="Center"
                            h:Cattach.Icon="&#xe611;"
                            h:Cattach.IconMargin="0"
                            h:Cattach.IconSize="18"
                            h:Cattach.IsOpenFileButtonBehaviorEnabled="True"
                            Command="{x:Static h:Cattach.OpenFileCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Cursor="Arrow"
                            Foreground="{TemplateBinding Foreground}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Transparent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.OpenFolder, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Title" Value="设置路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件夹路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Margin="0,1,0,2"
                                   VerticalAlignment="Center"
                                   h:Cattach.IsOpenFolderButtonBehaviorEnabled="True"
                                   Command="h:Cattach.OpenFolderCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                                   Cursor="Arrow"
                                   IconMargin="0"
                                   IconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />-->

                    <Button Margin="0,1,0,2"
                            VerticalAlignment="Center"
                            h:Cattach.Icon="&#xe611;"
                            h:Cattach.IconMargin="0"
                            h:Cattach.IconSize="18"
                            h:Cattach.IsOpenFileButtonBehaviorEnabled="True"
                            Command="{x:Static h:Cattach.OpenFolderCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Cursor="Arrow"
                            Foreground="{TemplateBinding Foreground}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Transparent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.SaveFile, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.LabelClear}}" TargetType="{x:Type TextBox}">
        <Setter Property="h:Cattach.Title" Value="保存路径 " />
        <Setter Property="h:Cattach.Watermark" Value="选择文件保存路径 " />
        <Setter Property="h:Cattach.AttachContent">
            <Setter.Value>
                <ControlTemplate>
                    <!--<Button Margin="0,1,0,2"
                                   h:Cattach.IsSaveFileButtonBehaviorEnabled="True"
                                   Command="h:Cattach.SaveFileCommand"
                                   CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:TextBox}}}"
                                   Cursor="Arrow"
                                   IconMargin="0"
                                   IconSize="18"
                                   Foreground="{TemplateBinding Foreground}"
                                   Icon="&#xe611;"
                                   IsTabStop="False"
                                   Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}" />-->


                    <Button Margin="0,1,0,2"
                            VerticalAlignment="Center"
                            h:Cattach.Icon="&#xe611;"
                            h:Cattach.IconMargin="0"
                            h:Cattach.IconSize="18"
                            h:Cattach.IsOpenFileButtonBehaviorEnabled="True"
                            Command="{x:Static h:Cattach.SaveFileCommand}"
                            CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"
                            Cursor="Arrow"
                            Foreground="{TemplateBinding Foreground}"
                            Style="{DynamicResource {x:Static local:ButtonKeys.Transparent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Inner, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="h:Cattach.Title" Value="标题" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Margin="10,0" Background="Transparent">
                        <TextBlock HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Background="Transparent"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Inner.Clear, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Static h:TextBoxKeys.Clear}}" TargetType="{x:Type TextBox}">
        <Setter Property="Padding" Value="0,0,0,0" />
        <Setter Property="h:Cattach.Title" Value="标题" />
        <Setter Property="h:Cattach.Icon" Value="" />
        <Setter Property="h:Cattach.TitleTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border Margin="10,0" Background="Transparent">
                        <TextBlock HorizontalAlignment="Right"
                                   VerticalAlignment="Center"
                                   Background="Transparent"
                                   FontSize="{TemplateBinding FontSize}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.TextBox.Editable, TypeInTargetAssembly={x:Type local:TextBoxKeys}}" BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type TextBox}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="MaxLength" Value="2048" />
        <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="ContextMenu" Value="{DynamicResource TextBoxContextMenu}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource TextSelectionBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static h:SystemKeys.FontFamily}}" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="CaretBrush" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Readonly}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style BasedOn="{StaticResource {x:Static h:TextBoxKeys.Default}}" TargetType="{x:Type TextBox}" />

</ResourceDictionary>