<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">


    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Default, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="MinHeight" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="h:Cattach.IsUseClose" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(h:Cattach.IsUseClose)}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(h:Cattach.CellMargin)}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(h:Cattach.ItemBackground)}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />

        <Setter Property="h:Cattach.MouseOverBackground" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.MouseOverBackground)}"/>
        <Setter Property="h:Cattach.MouseOverForeground" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.MouseOverForeground)}"/>
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.MouseOverBorderBrush)}"/>
        <Setter Property="h:Cattach.SelectBackground" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.SelectBackground)}"/>
        <Setter Property="h:Cattach.SelectForeground" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.SelectForeground)}"/>
        <Setter Property="h:Cattach.SelectBorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox},Path=(h:Cattach.SelectBorderBrush)}"/>

        <Setter Property="RenderTransform" Value="{DynamicResource {x:Static h:SystemKeys.TransformGroup}}"/>
        <Setter Property="RenderTransformOrigin" Value="0.5 0.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="Transparent">
                        <Border x:Name="boder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

                        <Border x:Name="boder_mouseover"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Opacity="0" />

                        <Border x:Name="boder_selected"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectBackground)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Opacity="0" />

                        <Grid Margin="{TemplateBinding Padding}" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            <!--  VerticalAlignment="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=VerticalContentAlignment }"  -->

                            <Button Grid.Column="1"
                                    Height="Auto"
                                    Margin="0"
                                    Padding="{DynamicResource {x:Static h:ThicknessKeys.DockRight}}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Foreground="{TemplateBinding Foreground}"
                                    Style="{DynamicResource {x:Static h:ButtonKeys.Clear}}"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IsUseClose), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Click">
                                        <h:CloseItemsAction Item="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}}" ItemsControl="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </Button>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />
                            <Setter Property="Panel.ZIndex" Value="999" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_selected"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_selected"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="h:Cattach.IsDragEnter" Value="true">
                            <Setter TargetName="boder" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="boder" Property="BorderThickness" Value="0,1,0,0" />
                            <Setter TargetName="boder" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(h:Cattach.MouseOverEffect)}" />
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Effect" Value="{Binding RelativeSource={RelativeSource AncestorType=ListBox}, Path=(h:Cattach.SelectEffect)}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.LeftAccent, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="Transparent">

                        <Border x:Name="boder" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />

                        <ContentPresenter Margin="20,0" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                        <Border x:Name="left"
                                Width="8"
                                HorizontalAlignment="Left"
                                Background="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.Left}}"
                                Visibility="Collapsed" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="boder" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity8}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="false" />
                                <Condition Property="IsMouseOver" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="boder" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity1}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0.1"
                                                         Duration="0:0:0" />
                                        <DoubleAnimation Storyboard.TargetName="boder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.4" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>

                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="boder" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity2}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="left" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.BottomAccent, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="FontSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Header}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Height="{TemplateBinding Height}"
                          Margin="{TemplateBinding Padding}"
                          VerticalAlignment="Stretch"
                          Background="Transparent">
                        <Border x:Name="underline"
                                VerticalAlignment="Stretch"
                                BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                BorderThickness="0,0,0,2" />

                        <ContentPresenter Margin="0,0" HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="false">
                            <Setter TargetName="underline" Property="BorderThickness" Value="0,0,0,0" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="underline" Property="BorderThickness" Value="0,0,0,0" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="underline" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.WithBorder, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <ControlTemplate.Resources>
                        <Style TargetType="CheckBox">
                            <Setter Property="Margin" Value="5,2" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="CheckBox">
                                        <Grid>
                                            <TextBlock x:Name="txt" Text="{TemplateBinding Content}" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="true">
                                                <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>

                    <Border x:Name="IconBorder"
                            Background="Transparent"
                            BorderBrush="LightGray"
                            BorderThickness="0,0,0,0.2">
                        <Border>
                            <CheckBox x:Name="cb"
                                      VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                      Content="{Binding Name}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsChecked="{Binding IsSelected}"
                                      IsHitTestVisible="False" />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="IconBorder" Property="BitmapEffect">
                                <Setter.Value>
                                    <OuterGlowBitmapEffect GlowColor="Transparent" GlowSize="5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="cb" Property="IsChecked" Value="true" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="IconBorder" Property="BitmapEffect">
                                <Setter.Value>
                                    <OuterGlowBitmapEffect GlowColor="Transparent" GlowSize="5" />
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="cb" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.AccentOpacity8}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.BorderBrush, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="2,2" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="Transparent">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Button Grid.Column="1"
                                    Width="{DynamicResource {x:Static h:SystemKeys.RowHeight}}"
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    h:Cattach.IconSize="{DynamicResource {x:Static h:IconSizeKeys.Small}}"
                                    Background="Transparent"
                                    Foreground="{TemplateBinding Foreground}"
                                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IsUseClose), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Click">
                                        <h:CloseItemsAction Item="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}}" ItemsControl="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </Button>
                        </Grid>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                        </Trigger>

                        <Trigger Property="h:Cattach.IsDragEnter" Value="true">
                            <!--<Setter Property="BorderBrush" TargetName="boder" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}"/>
                            <Setter Property="BorderThickness" TargetName="boder"   Value="0,1,0,0"/>-->

                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.CheckBox.Box, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Margin" Value="2,2" />
        <Setter Property="Padding" Value="1,2" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <CheckBox Margin="{TemplateBinding Padding}"
                              VerticalAlignment="Stretch"
                              HorizontalAlignment="Stretch"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                              IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}"
                              Style="{DynamicResource {x:Static h:CheckBoxKeys.Box}}">
                        <CheckBox.Content>
                            <ContentPresenter />
                        </CheckBox.Content>
                    </CheckBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.RadioButton.Default, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Margin" Value="2,2" />
        <Setter Property="Padding" Value="1,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <RadioButton Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=Foreground}" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}">
                        <RadioButton.Content>
                            <ContentPresenter />
                        </RadioButton.Content>
                    </RadioButton>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Clear, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="boder">
                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter VerticalAlignment="{TemplateBinding VerticalAlignment}" />

                            <Button Grid.Column="1"
                                    Width="{DynamicResource {x:Static h:SystemKeys.RowHeight}}"
                                    Margin="0"
                                    HorizontalAlignment="Center"
                                    h:Cattach.IconSize="{DynamicResource {x:Static h:IconSizeKeys.Small}}"
                                    Background="Transparent"
                                    Foreground="{TemplateBinding Foreground}"
                                    Style="{DynamicResource {x:Static h:ButtonKeys.Close}}"
                                    Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.IsUseClose), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Click">
                                        <h:CloseItemsAction Item="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}}" ItemsControl="{Binding RelativeSource={RelativeSource AncestorType=ListBox}}" />
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </Button>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Single, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundSelected}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Accent, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundMouseOver}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
    </Style>


    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.AccentBack, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.WhiteOpactiy1}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.WhiteOpactiy3}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.Office, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Default}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.Top}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.CheckBox.Default, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Height" Value="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Margin="0,0.5"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <StackPanel Margin="{TemplateBinding Padding}" VerticalAlignment="Center" Orientation="Horizontal">
                            <CheckBox x:Name="cbx" IsChecked="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                <ContentPresenter Margin="{TemplateBinding Padding}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </CheckBox>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="cbx" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
                            <Setter TargetName="cbx" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.White}}" />

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ListBoxItem.All, TypeInTargetAssembly={x:Type local:ListBoxItemKeys}}" BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.Single}}" TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid Background="Transparent">
                        <Border x:Name="boder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}" />

                        <Border x:Name="boder_mouseover"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Opacity="0" />

                        <Border x:Name="boder_selected"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectBackground)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Opacity="0" />

                        <DockPanel>
                            <CheckBox Content="选择" DockPanel.Dock="Left" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" />

                            <Button Height="30" DockPanel.Dock="Right" Style="{DynamicResource {x:Static local:ButtonKeys.Delete}}">
                                <h:Interaction.Behaviors>
                                    <h:RemoveItemButtonBehavior Item="{Binding}" ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=ItemsControl}, Path=DataContext.Teachers}" />
                                </h:Interaction.Behaviors>
                            </Button>

                            <ContentPresenter />
                        </DockPanel>

                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />

                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_selected"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="1"
                                                         Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="boder_selected"
                                                         Storyboard.TargetProperty="Opacity"
                                                         To="0"
                                                         Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="h:Cattach.IsDragEnter" Value="true">
                            <Setter TargetName="boder" Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="boder" Property="BorderThickness" Value="0,1,0,0" />
                            <Setter TargetName="boder" Property="CornerRadius" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>