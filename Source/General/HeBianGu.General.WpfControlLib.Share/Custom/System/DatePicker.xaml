<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="S.DatePick.Template.Default" TargetType="{x:Type DatePicker}">
        <Grid x:Name="PART_Root">

            <Grid x:Name="PART_InnerGrid" Margin="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Border x:Name="Bg"
                        Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                        Grid.ColumnSpan="9"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />


                <Border x:Name="boder_mouseover"
                        Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                        Grid.ColumnSpan="9"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.MouseOverBackground)}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0"
                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

                <Border x:Name="boder"
                        Grid.Column="{TemplateBinding h:Cattach.BackgroundColumn}"
                        Grid.ColumnSpan="9"
                        Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FocusBackground)}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                        Opacity="0"
                        Visibility="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UseBackground), Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}" />

                <ContentControl x:Name="Label"
                                Margin="0"
                                Content="{TemplateBinding h:Cattach.Title}"
                                IsHitTestVisible="False"
                                IsTabStop="False"
                                Template="{TemplateBinding h:Cattach.TitleTemplate}" />

                <Border Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <ContentControl x:Name="PART_AttachContent"
                                    VerticalAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}"
                                    Template="{TemplateBinding h:Cattach.AttachContent}" />
                </Border>

                <Border Grid.Column="3" Width="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}" HorizontalAlignment="Center">
                    <ToggleButton x:Name="PART_DropDownToggle"
                                  HorizontalAlignment="Center"
                                  h:Cattach.Icon="&#xe6f3;"
                                  h:Cattach.IconSize="18"
                                  IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  IsTabStop="False"
                                  Style="{DynamicResource {x:Static h:ToggleButtonKeys.FIconSingle}}" />
                </Border>

                <Border Grid.Column="1">
                    <TextBlock x:Name="Message"
                               Margin="5,2,5,2"
                               Padding="0"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               IsHitTestVisible="False"
                               Opacity="{StaticResource {x:Static h:OpacityKeys.Watermark}}"
                               Text="{TemplateBinding h:Cattach.Watermark}"
                               TextAlignment="Center"
                               Visibility="Collapsed" />
                </Border>

                <Grid Grid.Column="1">
                    <TextBox x:Name="PART_TextBox"
                             Margin="{TemplateBinding Padding}"
                             HorizontalAlignment="Stretch"
                             FontFamily="{TemplateBinding FontFamily}"
                             FontSize="{TemplateBinding FontSize}"
                             Foreground="{TemplateBinding Foreground}"
                             IsHitTestVisible="True"
                             IsReadOnly="True"
                             SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                             Style="{DynamicResource {x:Static local:TextBoxKeys.Editable}}"
                             Text="{Binding Path=SelectedDate, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, StringFormat={StaticResource {x:Static h:SystemKeys.DateFormat}}}" />
                </Grid>
                <Popup x:Name="PART_Popup"
                       AllowsTransparency="True"
                       Placement="MousePoint"
                       PlacementTarget="{Binding ElementName=PART_DropDownToggle}"
                       StaysOpen="False" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="BorderBrush" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverForeground), RelativeSource={RelativeSource Self}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.MouseOverBorderBrush), RelativeSource={RelativeSource Mode=TemplatedParent}}" />

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder_mouseover"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <!--<Setter  Property="BorderBrush" Value="{Binding Path=(h:Cattach.FocusBorderBrush),RelativeSource={RelativeSource Self}}"/>-->
                <Setter TargetName="Label" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_AttachContent" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="PART_DropDownToggle" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter TargetName="Message" Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.FocusForeground), RelativeSource={RelativeSource Self}}" />
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0.5"
                                             Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="boder"
                                             Storyboard.TargetProperty="Opacity"
                                             To="0"
                                             Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  Dynamic  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Dynamic, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static local:ControlKeys.Dynamic}}" TargetType="{x:Type DatePicker}">
        <Setter Property="IsTodayHighlighted" Value="True" />
        <Setter Property="CalendarStyle" Value="{DynamicResource {x:Static local:CalendarKeys.Default}}" />
        <Setter Property="Template" Value="{StaticResource S.DatePick.Template.Default}" />
        <Setter Property="SelectedDate" Value="{x:Static sys:DateTime.Now}" />
    </Style>

    <!--  default  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Default, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static local:DatePickerKeys.Dynamic}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Clear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Dynamic}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Label, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Dynamic}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.LabelClear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Dynamic}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <!--  Single  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Single, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Single.Label, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Single}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />

    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Single.LabelClear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Single}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Single.Clear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Single}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>
    <!--  Accent  -->
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Accent, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Accent.Clear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Accent}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Accent.Label, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Accent}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Accent.LabelClear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Accent}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.TitleTemplate}}" />
    </Style>
    <!--  Circle  -->
    <!--
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Circle, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.Circle}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Circle.Label, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.Circle}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.LabelCircleTemplate}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Circle.Clear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.Circle}}" />
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>
    <Style x:Key="{ComponentResourceKey ResourceId=S.DatePicker.Circle.LabelClear, TypeInTargetAssembly={x:Type local:DatePickerKeys}}" BasedOn="{StaticResource {x:Static h:DatePickerKeys.Default}}" TargetType="{x:Type DatePicker}">
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.Circle}}" />
        <Setter Property="h:Cattach.TitleTemplate" Value="{DynamicResource {x:Static local:ShareKeys.LabelCircleTemplate}}" />
        <Setter Property="h:Cattach.AttachContent" Value="{DynamicResource {x:Static local:ShareKeys.ClearTemplate}}" />
    </Style>-->
</ResourceDictionary>