<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="QQ:908293466"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Themes/Share.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Dynamic, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource S.ToggleButton.Dynamic}" TargetType="{x:Type ToggleButton}">
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />-->
        <Setter Property="h:Cattach.UnSelectedText" Value="&#xe81a;" />
        <Setter Property="h:Cattach.SelectedText" Value="&#xe81d;" />
        <Setter Property="h:Cattach.SelectedOpacity" Value="1" />
        <Setter Property="h:Cattach.UnSelectedOpacity" Value="0.8" />
     
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <DockPanel>
                            <TextBlock x:Name="icon"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedText)}" />
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </DockPanel>
                    </Grid>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />
                            <Setter TargetName="Grid" Property="Opacity" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedOpacity)}" />
                            <Setter TargetName="icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.SelectedText)}" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectForeground)}" />
                            <Setter TargetName="Grid" Property="Opacity" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UnSelectedOpacity)}" />
                            <Setter TargetName="icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.UnSelectedText)}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Default, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Default" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Single, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Default}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Single" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Accent, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Default}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="h:Cattach.StyleType" Value="Accent" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.BrushFIconChecked, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Large}}" />
        <Setter Property="h:Cattach.IconMargin" Value="1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe603;" />
        <Setter Property="h:Cattach.CheckedForegroundBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.CheckedBackgroundBrush" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Margin="{TemplateBinding h:Cattach.IconMargin}" Orientation="Horizontal">

                            <TextBlock x:Name="Icon"
                                       FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                       Text="{TemplateBinding h:Cattach.Icon}" />

                            <TextBlock x:Name="txt"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="{Binding Path=FontSize, RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />
                        </StackPanel>
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="txt" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />

                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Foreground" Value="{Binding Path=(h:Cattach.CheckedForegroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="txt" Property="Foreground" Value="{Binding Path=(h:Cattach.CheckedForegroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Background" Value="{Binding Path=(h:Cattach.CheckedBackgroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="txt" Property="Background" Value="{Binding Path=(h:Cattach.CheckedBackgroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="txt" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.BrushFIconChecked.RightToLeft, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Large}}" />
        <Setter Property="h:Cattach.IconMargin" Value="1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe603;" />
        <Setter Property="h:Cattach.CheckedForegroundBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.CheckedBackgroundBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Margin="{TemplateBinding h:Cattach.IconMargin}" Orientation="Horizontal">

                            <TextBlock x:Name="txt"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="{Binding Path=FontSize, RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />

                            <TextBlock x:Name="Icon"
                                       Margin="{Binding Path=(h:Cattach.IconMargin), RelativeSource={RelativeSource TemplatedParent}}"
                                       VerticalAlignment="Center"
                                       FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                       Text="{TemplateBinding h:Cattach.Icon}" />
                        </StackPanel>
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="txt" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />

                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding Path=(h:Cattach.CheckedForegroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter Property="Background" Value="{Binding Path=(h:Cattach.CheckedBackgroundBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="txt" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.DoubleFIconChecked, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:FontSizeKeys.Default}}" />
        <Setter Property="h:Cattach.IconMargin" Value="1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe81a;" />
        <Setter Property="Content" Value="&#xe81d;" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <!--<StackPanel Orientation="Horizontal" Margin="{TemplateBinding h:Cattach.IconMargin}">-->

                        <TextBlock x:Name="Icon"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="{TemplateBinding h:Cattach.Icon}" />

                        <!--</StackPanel>-->
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="Icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.DoubleFIconChecked.Single, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.DoubleFIconChecked}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Margin="{TemplateBinding h:Cattach.IconMargin}" Orientation="Horizontal">

                            <TextBlock x:Name="Icon"
                                       FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                       Text="{TemplateBinding h:Cattach.Icon}" />

                        </StackPanel>
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            <Setter TargetName="Icon" Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.FIconSingle, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundAssist}}" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Large}}" />
        <Setter Property="h:Cattach.IconMargin" Value="1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe603;" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid" Margin="{TemplateBinding Padding}">
                        <StackPanel Margin="{TemplateBinding h:Cattach.IconMargin}" Orientation="Horizontal">
                            <TextBlock x:Name="Icon"
                                       FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                       Text="{TemplateBinding h:Cattach.Icon}" />
                            <TextBlock x:Name="txt"
                                       HorizontalAlignment="Center"
                                       VerticalAlignment="Center"
                                       FontSize="{Binding Path=FontSize, RelativeSource={RelativeSource TemplatedParent}}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Text="{TemplateBinding Content}" />
                        </StackPanel>
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Icon" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="txt" Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                            <Setter TargetName="Icon" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                            <Setter TargetName="txt" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Grid" Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Rotate.90, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource {x:Static h:ToggleButtonKeys.Dynamic}}" TargetType="{x:Type ToggleButton}">
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />-->
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Small}}" />
        <Setter Property="h:Cattach.IconMargin" Value="0,1,3,1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe63a;" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverForeground}}" />
        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid x:Name="Grid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Border x:Name="Bg"
                                Grid.ColumnSpan="2"
                                Margin="0,1,1,1"
                                Background="{TemplateBinding Background}"
                                Opacity="0.3"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <DockPanel VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <TextBlock x:Name="Icon"
                                   Grid.Column="1" DockPanel.Dock="Right"
                                   Margin="{TemplateBinding h:Cattach.IconMargin}"
                                   h:Cattach.AllowsAnimation="{TemplateBinding IsChecked}"
                                   FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                   Foreground="{TemplateBinding Foreground}"
                                   RenderTransformOrigin="0.5,0.5"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="{TemplateBinding h:Cattach.Icon}">
                                <TextBlock.RenderTransform>
                                    <RotateTransform x:Name="rts" />
                                </TextBlock.RenderTransform>
                            </TextBlock> 
                            <ContentPresenter/>
                        </DockPanel> 
                    </Grid>
                    <!--  z触发器  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.SelectBackground)}" />
                            <!--<Setter Property="Opacity" TargetName="Bg" Value="0.6" />-->
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="rts"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="-90"
                                                         Duration="00:00:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="rts"
                                                         Storyboard.TargetProperty="Angle"
                                                         To="0"
                                                         Duration="00:00:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}" />
                            <Setter TargetName="Bg" Property="Opacity" Value="0.55" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.90" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>

                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="{DynamicResource {x:Static h:OpacityKeys.Disable}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.Tree, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource S.ToggleButton.Dynamic}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="13" />
        <Setter Property="Height" Value="13" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Width="13" Height="13" Background="Transparent">
                        <Border BorderThickness="0" CornerRadius="1" SnapsToDevicePixels="true">
                            <Viewbox>
                                <Path x:Name="ExpandPath"
                                      Margin="1,1,1,1"
                                      Data="M449.386 277.44l250.667 250.773-250.667 250.667z"
                                      Fill="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
                            </Viewbox>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Data" Value="M767.893 449.386l-250.773 250.667-250.667-250.667z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.ToggleButton.ComboBox, TypeInTargetAssembly={x:Type local:ToggleButtonKeys}}" BasedOn="{StaticResource S.ToggleButton.Dynamic}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" />
        <Setter Property="h:Cattach.IconSize" Value="{DynamicResource {x:Static h:IconSizeKeys.Default}}" />
        <Setter Property="h:Cattach.IconMargin" Value="0,1,3,1" />
        <Setter Property="h:Cattach.Icon" Value="&#xe9bd;" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Border x:Name="Bg"
                                Grid.ColumnSpan="2"
                                Margin="0,1,1,1"
                                Background="{TemplateBinding Background}"
                                Opacity="0"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <TextBlock x:Name="Icon"
                                   Grid.Column="1"
                                   Margin="{TemplateBinding h:Cattach.IconMargin}"
                                   HorizontalAlignment="Right"
                                   h:Cattach.AllowsAnimation="{TemplateBinding IsChecked}"
                                   FontSize="{Binding Path=(h:Cattach.IconSize), RelativeSource={RelativeSource TemplatedParent}}"
                                   Foreground="{TemplateBinding Foreground}"
                                   Style="{DynamicResource {x:Static h:TextBlockKeys.Icon}}"
                                   Text="{TemplateBinding h:Cattach.Icon}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>