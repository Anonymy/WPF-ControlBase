<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <!--<h:MathMultipleConverter x:Key="MathMlpMultipleConverter" Operation="Multiply" />-->

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Circle, TypeInTargetAssembly={x:Type local:BorderKeys}}" TargetType="{x:Type Border}" />

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Default, TypeInTargetAssembly={x:Type local:BorderKeys}}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}"/>-->
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Single, TypeInTargetAssembly={x:Type local:BorderKeys}}" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.BorderBrushDefault}}" />
        <Setter Property="CornerRadius" Value="{DynamicResource {x:Static h:CornerRadiusKeys.CornerRadius}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" />
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Card, TypeInTargetAssembly={x:Type local:BorderKeys}}" BasedOn="{StaticResource {x:Static local:BorderKeys.Default}}" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Effect" Value="{DynamicResource {x:Static h:EffectShadowKeys.Default1}}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Effect" Value="{DynamicResource {x:Static h:EffectShadowKeys.Default3}}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                <Setter Property="Effect" Value="{DynamicResource {x:Static h:EffectShadowKeys.Accent3}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Card.BorderThickness, TypeInTargetAssembly={x:Type local:BorderKeys}}" BasedOn="{StaticResource {x:Static local:BorderKeys.Single}}" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="2" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                <Setter Property="BorderThickness" Value="3" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Card.BorderBrush, TypeInTargetAssembly={x:Type local:BorderKeys}}" BasedOn="{StaticResource {x:Static local:BorderKeys.Single}}" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="5" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Border.Card.Background, TypeInTargetAssembly={x:Type local:BorderKeys}}" BasedOn="{StaticResource {x:Static local:BorderKeys.Single}}" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="5" />
        <Setter Property="Padding" Value="5" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.AccentMouseOverBackground}}" />
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
                <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
