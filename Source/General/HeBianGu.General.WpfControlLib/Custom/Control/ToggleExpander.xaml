<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
    xmlns:h="QQ:908293466" 
   xmlns:net="clr-namespace:System.Net.NetworkInformation;assembly=System" xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib">


    <Style x:Key="S.ToggleExpander.Default" TargetType="{x:Type local:ToggleExpander}">
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="h:Cattach.FIconSize" Value="60"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <!--<Setter Property="Visibility" Value="Collapsed"/>-->
                    <Setter Property="RenderTransform" Value="{StaticResource S.TransformGroup.Default}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <ContentPresenter/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel IsItemsHost="True" VerticalAlignment="Center" Orientation="Vertical" HorizontalAlignment="Left"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <Border Background="Transparent" BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <ToggleButton x:Name="tg" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                      Content="&#xe639;" h:Cattach.FIcon="&#xe635;"
                                      h:Cattach.FIconSize="{TemplateBinding h:Cattach.FIconSize}"  
                                      Style="{DynamicResource S.ToggleButton.DoubleFIconChecked}">
                                <!--<h:Interaction.Triggers>
                                    <h:EventTrigger EventName="MouseEnter">
                                        <h:ChangePropertyAction PropertyName="IsChecked" Value="true"/>
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>-->
                            </ToggleButton>

                            <Popup x:Name="PART_Popup" AllowsTransparency="True" VerticalOffset="2" IsOpen="{Binding ElementName=tg,Path=IsChecked}"
                               PlacementTarget="{Binding ElementName=tg}" StaysOpen="True"
                               PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">

                                <Grid>
                                    <Border Background="{TemplateBinding Background}" 
                                            BorderBrush="{TemplateBinding BorderBrush}" 
                                            BorderThickness="{TemplateBinding BorderThickness}" 
                                            CornerRadius="{DynamicResource S.Window.Item.CornerRadius}"/>

                                    <!--<Polygon  HorizontalAlignment="Left" Fill="{DynamicResource S.Brush.Accent}" 
                                              Stroke="{DynamicResource S.Brush.TextBorderBrush.Default}" 
                                              Points="0,5 5,0 10,5 0,5"
                                              Margin="0,-5,8,0" FillRule="Nonzero"/>-->
                                    
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value="{DynamicResource S.Opacity.Disable}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.ToggleExpander.Single" TargetType="{x:Type local:ToggleExpander}" BasedOn="{StaticResource S.ToggleExpander.Default}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
        <Setter Property="h:Cattach.CornerRadius" Value="28"/>
        <Setter Property="h:Cattach.FIconSize" Value="40"/>
        <Setter Property="DockPanel.Dock" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ItemsControl">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                        <DockPanel HorizontalAlignment="Left" VerticalAlignment="Center">

                            <ToggleButton x:Name="tg" HorizontalAlignment="Center"  h:InvokeTimeSplitAnimationAction.IsExcept="True" VerticalAlignment="Center" DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
                                      Content="&#xe639;" h:Cattach.FIcon="&#xe635;"
                                      
                                      Foreground="{TemplateBinding Foreground}" Margin="5,0"
                                      h:Cattach.FIconSize="{TemplateBinding h:Cattach.FIconSize}"  
                                      Style="{DynamicResource S.ToggleButton.DoubleFIconChecked}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Checked">
                                        <h:InvokeCommandAction Command="{x:Static local:CommandService.VisibleSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>

                                    <h:EventTrigger EventName="Unchecked">
                                        <h:InvokeCommandAction Command="{x:Static local:CommandService.CollapsedSplitAnimationCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </ToggleButton>

                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value="{DynamicResource S.Opacity.Disable}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="IsChecked"  Value="true" TargetName="tg"/>
                            <Setter Property="Cursor" Value="ScrollAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.ToggleExpander.Center" TargetType="{x:Type local:ToggleExpander}" BasedOn="{StaticResource S.ToggleExpander.Single}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="h:Cattach.FIconSize" Value="50"/>
        <Setter Property="h:Cattach.CornerRadius" Value="250"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:ToggleExpander">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding h:Cattach.CornerRadius}">
                        <Grid>
                            <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>

                            <ToggleButton x:Name="tg" HorizontalAlignment="Center" VerticalAlignment="Center" 
                                          DockPanel.Dock="{TemplateBinding DockPanel.Dock}"
                                          Content="&#xe639;" h:Cattach.FIcon="&#xe635;"
                                          h:Cattach.FIconSize="{TemplateBinding h:Cattach.FIconSize}"  
                                          Style="{DynamicResource S.ToggleButton.DoubleFIconChecked}">
                                <h:Interaction.Triggers>
                                    <h:EventTrigger EventName="Checked">
                                        <h:InvokeCommandAction Command="{x:Static local:CommandService.VisibleSplitAnimationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>

                                    <h:EventTrigger EventName="Unchecked">
                                        <h:InvokeCommandAction Command="{x:Static local:CommandService.CollapsedSplitAnimationCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                    </h:EventTrigger>
                                </h:Interaction.Triggers>
                            </ToggleButton>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity"  Value="{DynamicResource S.Opacity.Disable}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="IsChecked"  Value="true" TargetName="tg"/>
                            <Setter Property="Cursor" Value="ScrollAll"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:CirclePanel Len="60" Margin="25" IsAnimation="False"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ToggleExpander}" BasedOn="{StaticResource S.ToggleExpander.Default}"/>

</ResourceDictionary>

