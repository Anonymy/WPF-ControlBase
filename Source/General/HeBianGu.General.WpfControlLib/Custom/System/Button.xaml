<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:HeBianGu.General.WpfControlLib"
                    xmlns:h="QQ:908293466"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <ControlTemplate x:Key="S.Button.Template.Default" TargetType="{x:Type Button}">
        <Grid >
            <Border x:Name="border" Background="{TemplateBinding Background}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.CornerRadius)}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            </Border>

            <Grid x:Name="grid" RenderTransformOrigin="0.5,0.5">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>

                <!--Icon/Text-->
                <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.Orientation)}" 
                            VerticalAlignment="Center" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">

                    <TextBlock x:Name="icon" HorizontalAlignment="Center" VerticalAlignment="Center"
                               Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.FIconMargin)}" 
                               RenderTransformOrigin="0.5,0.5" Style="{DynamicResource FIcon}"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FIcon)}"
                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FIconSize)}" 
                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}">
                        <TextBlock.RenderTransform>
                            <RotateTransform x:Name="transIcon" Angle="0"/>
                        </TextBlock.RenderTransform>
                    </TextBlock>

                    <Label x:Name="txt" VerticalAlignment="Center" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}" FontSize="{TemplateBinding FontSize}"
                           Foreground="{TemplateBinding Foreground}"/>

                </StackPanel>
            </Grid>

            <ProgressBar  Style="{DynamicResource S.ProgressBar.Buzy}"
                          Foreground="{TemplateBinding Foreground}"
                          Opacity="0.5" Value="{TemplateBinding h:Cattach.Value}"
                          IsIndeterminate="{TemplateBinding h:Cattach.IsIndeterminate}"
                          Visibility="{TemplateBinding h:Cattach.IsBuzy,Converter={x:Static h:XConverter.BooleanToVisibilityConverter}}">
              
                <!--<ProgressBar.Clip>
                    <RectangleGeometry  RadiusX="{TemplateBinding h:Cattach.CornerRadius}" RadiusY="{TemplateBinding h:Cattach.CornerRadius}">
                        <RectangleGeometry.Rect>
                            <Rect Width="280" Height="52"/>
                        </RectangleGeometry.Rect>
                    </RectangleGeometry>
                </ProgressBar.Clip>-->
            </ProgressBar>

        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverBackground)}"/>
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverBorderBrush)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="0.8" Duration="0:0:0.2" />

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.05" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.05" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="border" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.00" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1.00" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!--Ficon的动画触发器-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="h:Cattach.AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>

                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <!--鼠标按下时的前景、背景样式-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.PressBorderBrush)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.PressForeground)}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"/>
            </Trigger>

            <Trigger Property="h:Cattach.IsBuzy" Value="true">
                <Setter Property="Content" Value="{Binding Path=(h:Cattach.BuzyText),RelativeSource={RelativeSource TemplatedParent}}" TargetName="txt"/>
                <Setter Property="IsEnabled" Value="False"/>
            </Trigger>

            <Trigger Property="Content" Value="">
                <Setter Property="Visibility" Value="Collapsed" TargetName="txt"/>
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" TargetName="txt"/>
            </Trigger>

            <Trigger Property="h:Cattach.IsSelected" Value="true">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectBackground)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectForeground)}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="S.Button.Default" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="120"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Template" Value="{StaticResource S.Button.Template.Default}"/>
        <Setter Property="Padding" Value="3,1,3,1" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/> 
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="h:Cattach.PressBackground" Value="{DynamicResource S.Brush.Accent.Opacity.5}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <Setter Property="h:Cattach.CornerRadius" Value="{DynamicResource S.Window.Item.CornerRadius}" />
        <Setter Property="h:Cattach.FIconSize" Value="20" />
        <Setter Property="h:Cattach.FIconMargin" Value="0" />
        <Setter Property="h:Cattach.FIcon" Value="" />
        <Setter Property="h:Cattach.AllowsAnimation" Value="False" />

        <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource S.Brush.Red.Notice}" />
        <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource S.Brush.TextForeground.White}" />

        <Setter Property="RenderTransform" Value="{DynamicResource S.TransformGroup.Default}"/>

    </Style>

    <Style x:Key="S.Button.Transparent" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Default}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="Transparent" />
        <Setter Property="h:Cattach.PressBackground" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}"/>
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource S.Brush.Accent.MouseOver}" />
        <!--<Setter Property="Height" Value="Auto"/>-->
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="h:Cattach.FIconMargin" Value="0" />

    </Style>

    <Style x:Key="S.Button.Link" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Transparent}">
        <Setter Property="h:Cattach.Text" Value="请输入文本"/>
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=(h:Cattach.Text)}" TextDecorations="UnderLine" 
                           Foreground="{Binding RelativeSource={RelativeSource AncestorType=Button},Path=Foreground}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="S.Button.Circle" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Default}">
        <Setter Property="Width"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="h:Cattach.CornerRadius" Value="200"/>
        <Setter Property="h:Cattach.FIconSize" Value="20" />
        <Setter Property="h:Cattach.FIconMargin" Value="0,0,0,0" />
    </Style>


    <Style x:Key="S.Button.Circle.Transparent" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Circle}">
        <Setter Property="Width"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Height"  Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.White.Notice}" />
        <Setter Property="h:Cattach.PressBackground" Value="{DynamicResource S.Brush.Accent.Opacity.5}" />
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource S.Brush.White.Notice}" />
    </Style>

    <Style x:Key="S.Button.Transparent.BorderBrush" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Transparent}">
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.TextBorderBrush.Default}"/>
        <Setter Property="h:Cattach.MouseOverBorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}"/>
        <Setter Property="h:Cattach.PressBorderBrush" Value="{DynamicResource S.Brush.Accent}"/>
    </Style>


    <ControlTemplate x:Key="S.Button.Template.FIcon" TargetType="{x:Type Button}">
        <Grid>
            <Border x:Name="border" Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                    Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" Opacity="{TemplateBinding Opacity}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.CornerRadius)}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                    Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}"/>

            <Grid  x:Name="grid">
                <Grid.LayoutTransform>
                    <TransformGroup>
                        <ScaleTransform x:Name="grid_scale" ScaleX="1" ScaleY="1" />
                    </TransformGroup>
                </Grid.LayoutTransform>

                <TextBlock x:Name="icon"  Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=(h:Cattach.FIconMargin)}" 
                           RenderTransformOrigin="0.5,0.5" Style="{DynamicResource FIcon}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FIcon)}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(h:Cattach.FIconSize)}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"
                           HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="transIcon" Angle="0"/>
                    </TextBlock.RenderTransform>
                </TextBlock>
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverBackground)}"/>
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.MouseOverBorderBrush)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(h:Cattach.MouseOverForeground)}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.3" Duration="0:0:0.5" />

                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                            <DoubleAnimation Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Duration="0:0:0.2"  Storyboard.TargetName="grid" To="1"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!--Ficon的动画触发器-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="h:Cattach.AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>

                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="180" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>

            <!--鼠标按下时的前景、背景样式-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.PressBorderBrush)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.PressForeground)}"/>

                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"  Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="0.95" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>

                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"   Storyboard.TargetName="grid">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.05" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="{DynamicResource S.Opacity.Disable}"/>
            </Trigger>

            <Trigger Property="h:Cattach.IsSelected" Value="true">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectBackground)}"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=(h:Cattach.SelectForeground)}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="S.Button.MouseOver" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Default}">

        <Setter Property="Template" Value="{StaticResource S.Button.Template.FIcon}"/>
        <Setter Property="Background" Value="{DynamicResource S.Brush.TextForeground.Default}" />
        <Setter Property="h:Cattach.MouseOverForeground"  Value="{DynamicResource S.Brush.White.Notice}"/>
        <Setter Property="h:Cattach.MouseOverBackground"  Value="{DynamicResource S.Brush.Accent}"/>
        <Setter Property="h:Cattach.PressBackground" Value="{DynamicResource S.Brush.Accent}" />
        <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}" />
        <!--<Setter Property="MouseOverForeground" Value="{StaticResource S.Brush.Accent}" />-->
        <Setter Property="h:Cattach.PressForeground" Value="{DynamicResource S.Brush.Gray.Notice}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="{DynamicResource S.Window.Item.Height}"/>
        <Setter Property="Height" Value="{DynamicResource S.Window.Item.Height}" />
        <Setter Property="Opacity" Value="0.3" />
        <Setter Property="h:Cattach.CornerRadius" Value="200"/>
        <!--<Setter Property="FontSize" Value="{DynamicResource S.FontSize.Default}" />-->
        <!--<Setter Property="h:Cattach.CornerRadius"  Value="{DynamicResource S.Window.Item.CornerRadius}"  />-->
        <!--<Setter Property="h:Cattach.FIconSize" Value="20" />-->
        <!--<Setter Property="Padding" Value="3,1,3,1" />-->
        <!--<Setter Property="Content" Value="{x:Null}" />-->
        <!--<Setter Property="h:Cattach.FIconMargin" Value="0,0,0,0" />-->
        <!--<Setter Property="Margin" Value="0,2,0,0" />-->
        <!--<Setter Property="h:Cattach.AllowsAnimation" Value="False" />-->
        <!--<Setter Property="FontWeight" Value="Bold"/>-->
    </Style>

    <Style x:Key="S.Button.Close"  TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Default}">
        <Setter Property="Width" Value="{DynamicResource S.Window.Item.Height}"/>
        <Setter Property="h:Cattach.FIcon" Value="&#xe6f4;"/>
        <Setter Property="h:Cattach.AllowsAnimation" Value="True"/>
        <Setter Property="h:Cattach.CornerRadius" Value="200"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="S.Button.Close.MouseOver"  TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.MouseOver}">
        <Setter Property="Width" Value="{DynamicResource S.Window.Item.Height}"/>
        <Setter Property="h:Cattach.FIcon" Value="&#xe6f4;"/>
        <Setter Property="h:Cattach.AllowsAnimation" Value="True"/>
        <Setter Property="h:Cattach.MouseOverBackground" Value="{DynamicResource S.Brush.Red.Notice}"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="S.Button.Close.Transparent"  TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.Transparent}">
        <Setter Property="h:Cattach.FIcon" Value="&#xe6f4;"/>
        <Setter Property="h:Cattach.AllowsAnimation" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
    </Style>

    <Style x:Key="S.Button.Left" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.MouseOver}">
        <Setter Property="Margin" Value="20,0"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="h:Cattach.FIcon" Value="&#xe9be;"/>
        <Setter Property="Command" Value="{x:Static h:CommandService.Prev}"/>
    </Style>

    <Style x:Key="S.Button.Right" TargetType="{x:Type Button}" BasedOn="{StaticResource S.Button.MouseOver}">
        <Setter Property="Margin" Value="20,0"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="h:Cattach.FIcon" Value="&#xe9bf;"/>
        <Setter Property="Command" Value="{x:Static h:CommandService.Next}"/>
    </Style>
</ResourceDictionary>
