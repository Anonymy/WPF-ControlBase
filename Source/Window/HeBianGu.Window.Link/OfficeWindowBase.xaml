<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:h="https://github.com/HeBianGu"
                    xmlns:local="clr-namespace:HeBianGu.Window.Link">

    <ResourceDictionary.MergedDictionaries>
        <!--<ResourceDictionary Source="pack://application:,,,/HeBianGu.General.WpfControlLib;component/Custom/Window/WindowBase.xaml"/>-->
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Window.Message;component/MessageWindowBase.xaml" />
        <ResourceDictionary Source="pack://application:,,,/HeBianGu.Service.Mvp;component/Mvp.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="{ComponentResourceKey ResourceId=S.Window.Office.Default, TypeInTargetAssembly={x:Type local:OfficeWindowBase}}" BasedOn="{StaticResource {x:Static h:MessageWindowBase.DynamicKey}}" TargetType="{x:Type local:OfficeWindowBase}">
        <Setter Property="LinkActions" Value="{Binding LinkActions}" />
        <Setter Property="CurrentLink" Value="{Binding CurrentLink}" />
        <Setter Property="CaptionHeight" Value="{DynamicResource {x:Static h:SystemKeys.RowHeight}}" />
        <Setter Property="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="h:TransitionService.VisibleActions">
            <Setter.Value>
                <h:TransitionCollection>
                    <h:ScaleGeomotryTransition HideDuration="500" PointOriginType="MouseInnerOrCenter" VisibleDuration="1500" />
                </h:TransitionCollection>
            </Setter.Value>
        </Setter>

        <Setter Property="NotifyIconSource" Value="/HeBianGu.General.WpfControlLib;component/Resources/logo.ico" />


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:OfficeWindowBase}">
                    <Grid Effect="{TemplateBinding AdornerDecoratorEffect}">
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="Loaded">
                                <h:InvokeCommandAction Command="{Binding LoadedCommand}" />
                            </h:EventTrigger>
                        </h:Interaction.Triggers>

                        <Border x:Name="Bg"
                                Margin="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                Effect="{DynamicResource {x:Static h:EffectShadowKeys.Window}}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                        <!--<Border x:Name="BgInner"
                                Margin="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="{TemplateBinding h:Cattach.CornerRadius}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />-->

                        <Grid Margin="{TemplateBinding Padding}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" MinHeight="20" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Border Grid.Row="0" Background="{TemplateBinding CaptionBackground}" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.Top}}">
                                <Grid Margin="2,1,2,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>

                                    <Border Grid.RowSpan="2" Grid.ColumnSpan="2" />

                                    <ContentControl Content="{TemplateBinding TitleContent}" WindowChrome.IsHitTestVisibleInChrome="True" />

                                    <StackPanel x:Name="PART_Header"
                                                Grid.ColumnSpan="2"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                Orientation="Horizontal">
                                        <TextBlock VerticalAlignment="Center"
                                                   FontSize="{DynamicResource {x:Static h:FontSizeKeys.Header}}"
                                                   Foreground="{TemplateBinding CaptionForeground}"
                                                   Text="{TemplateBinding Title}" />
                                    </StackPanel>

                                    <StackPanel Grid.Column="1"
                                                Height="{TemplateBinding CaptionHeight}"
                                                Margin="1"
                                                HorizontalAlignment="Right"
                                                VerticalAlignment="Top"
                                                Orientation="Horizontal">
                                        <Button Style="{DynamicResource {x:Static h:ButtonKeys.HideWindow}}" />

                                        <ToggleButton x:Name="btnTheme" Foreground="{Binding RelativeSource={RelativeSource AncestorType=h:MessageWindowBase}, Path=CaptionForeground}" Style="{StaticResource S.ToggleButton.Window.Theme}" />

                                        <Button Foreground="{Binding RelativeSource={RelativeSource AncestorType=h:MessageWindowBase}, Path=CaptionForeground}" Style="{StaticResource S.Button.Window.Setting}" />

                                        <Separator Height="20" Background="{Binding RelativeSource={RelativeSource AncestorType=h:OfficeWindowBase}, Path=CaptionForeground}" Style="{DynamicResource {x:Static h:SeparatorKeys.Vertical}}" />

                                        <Button Style="{DynamicResource {x:Static h:ButtonKeys.MinimizeWindow}}" />
                                        <Button x:Name="btnMax" Style="{DynamicResource {x:Static h:ButtonKeys.MaximizeWindow}}" />
                                        <Button Style="{DynamicResource {x:Static h:ButtonKeys.CloseWindow}}" />
                                    </StackPanel>
                                </Grid>
                            </Border>

                            <AdornerDecorator Grid.Row="2" Margin="3,-1,3,3">
                                <Grid>
                                    <h:NotifyIcon x:Name="PART_NotifyIcon"
                                                  Command="{Binding Path=MinimizeWindowCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                                  Icon="{Binding Path=NotifyIconSource, RelativeSource={RelativeSource TemplatedParent}}"
                                                  IconVisibility="Visible"
                                                  Text="{TemplateBinding Title}">

                                        <FrameworkElement.ContextMenu>
                                            <ContextMenu>
                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="显示面板" />

                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=NotifyWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="隐藏" />

                                                <MenuItem Command="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CloseWindowCommand}" CommandTarget="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}" Header="退出" />
                                            </ContextMenu>
                                        </FrameworkElement.ContextMenu>
                                    </h:NotifyIcon>

                                    <h:DialogHost Margin="-3,0,-3,-3" Identifier="windowDialog">
                                        <Grid>
                                            <DockPanel>
                                                <Border Background="{TemplateBinding CaptionBackground}" DockPanel.Dock="Top">
                                                    <Grid>
                                                        <ContentControl Margin="0,0" Content="{TemplateBinding ToolContent}" />

                                                        <Button Width="60"
                                                                Height="{DynamicResource {x:Static h:SystemKeys.ItemHeight}}"
                                                                HorizontalAlignment="Left"
                                                                VerticalAlignment="Top"
                                                                h:Cattach.MouseOverBackground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhiteOpacity1}}"
                                                                Content="文件"
                                                                Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}"
                                                                Style="{DynamicResource {x:Static h:ButtonKeys.Transparent}}">
                                                            <h:Interaction.Triggers>
                                                                <h:EventTrigger EventName="Click">
                                                                    <h:ChangePropertyAction PropertyName="IsShowLink" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:OfficeWindowBase}}}" Value="True" />
                                                                    <!--<h:ChangePropertyAction PropertyName="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.BackgroundDefault}}" TargetObject="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                                    <h:ChangePropertyAction PropertyName="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundDefault}}" TargetObject="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>-->
                                                                </h:EventTrigger>
                                                            </h:Interaction.Triggers>
                                                        </Button>
                                                    </Grid>
                                                </Border>

                                                <Grid>
                                                    <ContentPresenter Content="{TemplateBinding Content}" />
                                                </Grid>
                                            </DockPanel>

                                            <DockPanel h:TransitionService.IsVisible="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsShowLink}">
                                                <h:TransitionService.VisibleActions>
                                                    <h:TransitionCollection>
                                                        <h:TranslateTransition StartPoint="-100,0" EndPoint="-100,0" Duration="200" />
                                                    </h:TransitionCollection>
                                                </h:TransitionService.VisibleActions>

                                                <Border Margin="0,-43,0,0" Background="{DynamicResource {x:Static h:BrushKeys.Accent}}" CornerRadius="{DynamicResource {x:Static h:CornerRadiusKeys.Left}}">
                                                    <DockPanel Width="130" VerticalAlignment="Stretch">
                                                        <Button Width="Auto"
                                                                Height="Auto"
                                                                Margin="20,30,0,0"
                                                                HorizontalAlignment="Left"
                                                                h:Cattach.Icon="&#xe9d9;"
                                                                h:Cattach.IconSize="45"
                                                                DockPanel.Dock="Top"
                                                                Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}">
                                                            <h:Interaction.Triggers>
                                                                <h:EventTrigger EventName="Click">
                                                                    <h:ChangePropertyAction PropertyName="IsShowLink" TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:OfficeWindowBase}}}" Value="False" />
                                                                    <!--<h:ChangePropertyAction PropertyName="CaptionBackground" Value="{DynamicResource {x:Static h:BrushKeys.Accent}}" TargetObject="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                                                <h:ChangePropertyAction PropertyName="CaptionForeground" Value="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" TargetObject="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}}"/>-->
                                                                </h:EventTrigger>
                                                            </h:Interaction.Triggers>
                                                        </Button>

                                                        <ListBox ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=LinkActions}" SelectedItem="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CurrentLink, Mode=TwoWay}">
                                                            <ListBox.ItemTemplate>
                                                                <DataTemplate>
                                                                    <TextBlock Margin="20,0" Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" Text="{Binding DisplayName}" />
                                                                </DataTemplate>
                                                            </ListBox.ItemTemplate>
                                                            <ListBox.ItemContainerStyle>
                                                                <Style BasedOn="{StaticResource {x:Static h:ListBoxItemKeys.AccentBack}}" TargetType="ListBoxItem">
                                                                    <Setter Property="Background" Value="Transparent" />
                                                                </Style>
                                                            </ListBox.ItemContainerStyle>
                                                        </ListBox>
                                                    </DockPanel>
                                                </Border>

                                                <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                                                    <local:LinkActionFrame Grid.Row="1"
                                                                           Margin="15,10"
                                                                           BorderThickness="0,0,0,0"
                                                                           LinkAction="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CurrentLink, Mode=TwoWay}" />
                                                </DockPanel>
                                            </DockPanel>

                                            <h:ContainPanel x:Name="PART_LAYERGROUP" Background="{DynamicResource {x:Static h:BrushKeys.DialogCover}}" Visibility="Collapsed">
                                                <h:ContainPanel.AnimationAction>
                                                    <h:ScaleTransition />
                                                </h:ContainPanel.AnimationAction>
                                            </h:ContainPanel>

                                            <h:MessageContainer x:Name="PART_Message" Grid.Row="1" />
                                        </Grid>
                                    </h:DialogHost>

                                    <h:Snackbar x:Name="PART_SnackBar" MessageQueue="{h:MessageQueue}" />
                                </Grid>
                            </AdornerDecorator>

                            <Popup HorizontalAlignment="Left"
                                   VerticalAlignment="Bottom"
                                   AllowsTransparency="True"
                                   IsOpen="{Binding ElementName=btnTheme, Path=IsChecked}"
                                   Placement="Top"
                                   PlacementTarget="{Binding ElementName=btnTheme}"
                                   PopupAnimation="Slide"
                                   StaysOpen="False">
                                <Border Background="{DynamicResource {x:Static h:BrushKeys.AccentOpacity5}}"
                                        BorderBrush="{DynamicResource {x:Static h:BrushKeys.Accent}}"
                                        BorderThickness="1"
                                        CornerRadius="5">
                                    <StackPanel Margin="10">
                                        <h:ThemeSet Foreground="{DynamicResource {x:Static h:BrushKeys.ForegroundWhite}}" />
                                    </StackPanel>
                                </Border>
                            </Popup>
                        </Grid>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="btnMax" Property="h:Cattach.Icon" Value="&#xe665;" />
                            <Setter Property="Padding" Value="0" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="btnMax" Property="h:Cattach.Icon" Value="&#xe615;" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Static local:OfficeWindowBase.DefaultKey}}" TargetType="{x:Type local:OfficeWindowBase}" />
</ResourceDictionary>