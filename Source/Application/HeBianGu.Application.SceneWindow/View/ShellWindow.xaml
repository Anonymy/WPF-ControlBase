<h:MenuWindowBase x:Class="HeBianGu.Application.SceneWindow.ShellWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:HeBianGu.Application.SceneWindow"
        xmlns:h="QQ:908293466"
        DataContext="{Binding Source={StaticResource S.DataSource.Locator},Path=ShellViewModel}" 
        Style="{DynamicResource S.Window.Menu.Default}" FIcon="&#xeb02;"
        NotifyIconSource="/HeBianGu.General.WpfControlLib;component/Resources/iBook.ico"
        mc:Ignorable="d" Title="ShellWindow" Height="800" Width="1300" CaptionHeight="50">

    <h:MenuWindowBase.Resources>

        <Style x:Key="C.MenuItem.Default" TargetType="MenuItem" BasedOn="{StaticResource S.MenuItem.Handy}">
            <Setter Property="Command" Value="{Binding RelayCommand}"/>
            <Setter Property="IsEnabled" Value="False"/>
            <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}"/>
            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Header}"/>
        </Style>


        <Style x:Key="C.MenuItem.Header" TargetType="MenuItem" BasedOn="{StaticResource S.MenuItem.Accent}">
            <Setter Property="Command" Value="{Binding RelayCommand}"/>
            <Setter Property="IsEnabled" Value="True"/> 
            <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
            <Setter Property="CommandParameter" Value="{Binding RelativeSource={RelativeSource Mode=Self},Path=Header}"/>
            <Setter Property="h:Cattach.MouseOverForeground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
            <Setter Property="h:Cattach.MouseOverBackground" Value="Transparent"/>
            <Setter Property="h:Cattach.MouseOverBorderBrush" Value="Transparent"/>
            <Setter Property="h:Cattach.SelectBackground" Value="{DynamicResource S.Brush.TextForeground.White}" />
            <Setter Property="h:Cattach.SelectForeground" Value="{DynamicResource S.Brush.Accent}"/>
        </Style>

        <Style TargetType="MenuItem" BasedOn="{StaticResource C.MenuItem.Default}"/>

        <Style x:Key="C.MenuItem.Menu" TargetType="MenuItem" BasedOn="{StaticResource S.MenuItem.Handy}">
            <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
        </Style>

        <Style TargetType="ToggleButton" BasedOn="{StaticResource S.ToggleButton.Single}">
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="Height" Value="60"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="BorderBrush" Value="{DynamicResource S.Brush.Accent.MouseOver}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.White}"/>
        </Style>

        <DataTemplate DataType="{x:Type h:TestViewModel}">
            <Grid x:Name="grid" HorizontalAlignment="Stretch" Background="{DynamicResource S.Brush.Accent}" TextBlock.Foreground="{DynamicResource S.Brush.TextForeground.White}">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <TextBlock Style="{StaticResource S.TextBlock.FIcon}" Margin="10,0" Grid.RowSpan="2" Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=Tag}" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=(h:Cattach.Detail)}" Grid.Column="1" Grid.Row="0" VerticalAlignment="Bottom"/>

                <TextBlock Text="{Binding Value}" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" FontWeight="Black"/>

                <!--<ToggleButton x:Name="tb" Style="{StaticResource ComboToggleButton}" h:Cattach.FIcon="&#xe63a;"  Margin="10,0" IsChecked="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=IsChecked}"
                                      Grid.Column="2" Grid.RowSpan="2" Foreground="{DynamicResource S.Brush.TextForeground.White}"
                                      VerticalAlignment="Center" HorizontalAlignment="Center"/>-->
            </Grid>
            <!--<DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ToggleButton},Path=IsChecked}" Value="True">
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" TargetName="grid"/>
                    <Setter Property="Foreground" Value="{DynamicResource S.Brush.TextForeground.Default}" TargetName="tb"/>
                    <Setter Property="Background" Value="{DynamicResource S.Brush.TextBackground.Default}" TargetName="grid"/>
                </DataTrigger>
            </DataTemplate.Triggers>-->
        </DataTemplate>

        <DataTemplate x:Key="C.TestViewModel.Item" DataType="{x:Type h:TestViewModel}">
            <Grid x:Name="grid" Width="320" HorizontalAlignment="Left" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Style="{StaticResource S.TextBlock.FIcon}" Margin="10,0" Grid.RowSpan="2" Text="&#xe90c;" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>

                <TextBlock Text="{Binding Value}" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" ToolTip="{Binding Value1}"/>

                <h:FButton x:Name="btn_close" Grid.Column="2" Style="{DynamicResource S.FButton.Close}" Margin="10,0"
                                                   FIconSize="12" MouseOverForeground="{DynamicResource S.Brush.Red.Notice}" Visibility="Hidden"
                                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}"/>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsMouseOver}" Value="True">
                    <Setter Property="Visibility" Value="Visible" TargetName="btn_close"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="C.TestViewModel.Item.Checked" DataType="{x:Type h:TestViewModel}">
            <Grid x:Name="grid" HorizontalAlignment="Stretch" TextBlock.Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}">
                <Grid.RowDefinitions>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <!--<TextBlock Style="{StaticResource S.TextBlock.FIcon}" Margin="10,0" Grid.RowSpan="2" Text="&#xe90c;" FontSize="15" VerticalAlignment="Center" HorizontalAlignment="Center"/>-->

                <h:FCheckBox Margin="10,0" Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}"/>
                
                <TextBlock Text="{Binding Value}" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" ToolTip="{Binding Value1}"/>

                <h:FButton x:Name="btn_close" Grid.Column="2" Style="{DynamicResource S.FButton.Close}" 
                                                   FIconSize="12" MouseOverForeground="{DynamicResource S.Brush.Red.Notice}" Visibility="Hidden"
                                                   Foreground="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=Foreground}"/>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem},Path=IsMouseOver}" Value="True">
                    <Setter Property="Visibility" Value="Visible" TargetName="btn_close"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </h:MenuWindowBase.Resources>

    <h:MenuWindowBase.MenuContent>
        <Menu DockPanel.Dock="Top">
            <MenuItem Header="文件(F)" Style="{StaticResource C.MenuItem.Header}">
                <MenuItem Header="新建场景" IsEnabled="True"/>
                <MenuItem Header="新建模板" IsEnabled="True"/>
                <MenuItem Header="打开场景"/>
                <MenuItem Header="保存场景"/>
                <MenuItem Header="另存为"/>
                <MenuItem Header="退出"/>
            </MenuItem>

            <MenuItem Header="编辑(E)"  Style="{StaticResource C.MenuItem.Header}">
                <MenuItem Header="上移"/>
                <MenuItem Header="下移"/>
                <MenuItem Header="复制"/>
                <MenuItem Header="粘贴"/>
                <MenuItem Header="删除"/>
            </MenuItem>

            <MenuItem Header="设置(S)"  Style="{StaticResource C.MenuItem.Header}">
                <MenuItem Header="上移"/>
                <MenuItem Header="下移"/>
                <MenuItem Header="复制"/>
                <MenuItem Header="粘贴"/>
                <MenuItem Header="删除"/>
            </MenuItem>

            <MenuItem Header="帮助(H)" Style="{StaticResource C.MenuItem.Header}">
                <MenuItem Header="软件升级"/>
                <MenuItem Header="关于"/>
            </MenuItem>
        </Menu>
    </h:MenuWindowBase.MenuContent>

    <h:GitTopContainer HeaderHeight="60">
        <h:GitTopContainer.CenterContent>
            <Grid Background="{DynamicResource S.Brush.TextBackground.Default}">
                <h:Row Style="{StaticResource S.Row.Column.4}" Grid.Row="1" Height="Auto">
                    <Border Background="{DynamicResource S.Brush.Dark.1}" Grid.ColumnSpan="3" Grid.Column="1"/>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="2*"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <TabControl ItemContainerStyle="{StaticResource S.TabItem.Line.Default}" BorderThickness="0" Background="Transparent" Padding="0">
                            <TabItem Header="文件列表" Width="145"  HorizontalContentAlignment="Center">
                                <DockPanel>
                                    <h:Row DockPanel.Dock="Top" Style="{StaticResource S.Row.Column.1}">
                                        <TextBlock Style="{StaticResource S.TextBlock.Default}">
                                            <Run Text="{Binding Files.Count,Mode=OneWay}"/>
                                            <Run Text="文件"/>
                                        </TextBlock>
                                        <Separator VerticalAlignment="Bottom" Background="{DynamicResource S.Brush.TextBorderBrush.Default}"/>
                                    </h:Row>

                                    <ListBox ItemTemplate="{StaticResource C.TestViewModel.Item.Checked}" ItemsSource="{Binding Files}" SelectedItem="{Binding SelectedFile}"  Background="{DynamicResource S.Brush.TextBackground.Default}">
                                        <!--<h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>
                                        <h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>
                                        <h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>-->
                                    </ListBox>
                                </DockPanel>
                            </TabItem>

                            <TabItem Header="历史记录"  Width="145" HorizontalContentAlignment="Center">
                                <ListBox ItemTemplate="{StaticResource C.TestViewModel.Item}"  ItemsSource="{Binding Historys}" SelectedItem="{Binding SelectedHistory}"  Background="{DynamicResource S.Brush.TextBackground.Default}">
                                    <!--<h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>
                                        <h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>
                                        <h:TestViewModel Value="WPF-ControlBase-Demo.sln"/>-->
                                </ListBox>
                            </TabItem>
                        </TabControl>

                        <DockPanel Grid.Row="1">
                            <h:Row DockPanel.Dock="Top">
                                <h:FTextBox Text="{Binding Title}" h:Cattach.Watermark="请输入标题" Grid.ColumnSpan="12" Margin="{DynamicResource S.Thickness.Margin.10.0}"/>
                            </h:Row>

                            <h:Row DockPanel.Dock="Bottom" Height="45" Margin="10,0">
                                <TextBlock Text="Committed a minute ago" Style="{StaticResource S.TextBlock.Default}" Grid.ColumnSpan="10" HorizontalAlignment="Left"/>
                                <h:FButton Style="{StaticResource S.FButton.Style.Transparent}" BorderBrush="{DynamicResource S.Brush.Dark.3}" 
                                   BorderThickness="1" Width="50" Content="Undo" Grid.Column="10" Grid.ColumnSpan="2"/>
                            </h:Row>

                            <h:Row DockPanel.Dock="Bottom" Height="45" Style="{StaticResource S.Row.Column.1}" Margin="10,0">
                                <Border BorderBrush="{DynamicResource S.Brush.Dark.2}" BorderThickness="1" Margin="-10,0"/>
                                <h:FButton DockPanel.Dock="Bottom" Grid.Row="2" Content="提交" Width="Auto" Command="{Binding RelayCommand}" CommandParameter="Button.Click.Commit">
                                    <!--<h:FButton.Triggers>
                                        <EventTrigger RoutedEvent="Button.Click">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation From="0" To="100" Duration="00:00:05" Storyboard.Target="{Binding ElementName=pg}" Storyboard.TargetProperty="Value"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </h:FButton.Triggers>-->
                                </h:FButton>
                            </h:Row>

                            <h:FTextBox Height="Auto" h:Cattach.Watermark="请输入说明"  Margin="{DynamicResource S.Thickness.Margin.10.0}"/>
                        </DockPanel>
                    </Grid>

                </h:Row>
            </Grid>
        </h:GitTopContainer.CenterContent>
        
        <h:GitTopItem HeaderContent="{Binding CurrentScene}">
            <h:GitTopItem.HeaderTemplate>
                <DataTemplate DataType="{x:Type h:TestViewModel}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Style="{StaticResource S.TextBlock.FIcon}" Margin="10,0" Grid.RowSpan="2" Text="&#xe6ad;" 
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>

                        <TextBlock Text="当前场景" Grid.Column="1" Grid.Row="0" VerticalAlignment="Bottom"/>

                        <TextBlock Text="{Binding Value}" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" FontWeight="Black"/>

                    </Grid>
                </DataTemplate>
            </h:GitTopItem.HeaderTemplate>
            <StackPanel>
                <h:FTextBox Margin="10" h:Cattach.Watermark="filter" h:Cattach.FIcon="&#xe787;"/>
                <GroupBox Style="{StaticResource S.GroupBox.UnderLine}" Header="Others" h:Cattach.FIcon="" Padding="0" Margin="0,2">
                    <ListBox ItemsSource="{Binding Scenes}" SelectedItem="{Binding SelectedScene}" ItemTemplate="{StaticResource C.TestViewModel.Item}">
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="MouseDoubleClick">
                                <h:InvokeCommandAction Command="{Binding RelayCommand}" CommandParameter="ListBox.MouseDoubleClick.SetSelectedScene"/>
                                <h:InvokeCommandAction Command="{x:Static h:GitTopContainer.CoverHideCommand}"/>
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </ListBox>
                </GroupBox>
            </StackPanel>
        </h:GitTopItem>

        <h:GitTopItem HeaderContent="{Binding CurrentTempalte}">
            <h:GitTopItem.HeaderTemplate>
                <DataTemplate DataType="{x:Type h:TestViewModel}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <TextBlock Style="{StaticResource S.TextBlock.FIcon}" Margin="10,0" Grid.RowSpan="2" Text="&#xe90b;" 
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>

                        <TextBlock Text="当前模板" Grid.Column="1" Grid.Row="0" VerticalAlignment="Bottom"/>

                        <TextBlock Text="{Binding Value}" Grid.Column="1" Grid.Row="1" VerticalAlignment="Center" FontWeight="Black"/>

                    </Grid>
                </DataTemplate>
            </h:GitTopItem.HeaderTemplate>
            <StackPanel>
                <h:FTextBox Margin="10" h:Cattach.Watermark="filter" h:Cattach.FIcon="&#xe787;"/>
                <GroupBox Style="{StaticResource S.GroupBox.UnderLine}" Header="Others" h:Cattach.FIcon="" Padding="0" Margin="0,2">
                    <ListBox ItemsSource="{Binding Templates}" SelectedItem="{Binding SelectedTemplate}" ItemTemplate="{StaticResource C.TestViewModel.Item}">
                        <h:Interaction.Triggers>
                            <h:EventTrigger EventName="MouseDoubleClick">
                                <h:InvokeCommandAction Command="{Binding RelayCommand}" CommandParameter="ListBox.MouseDoubleClick.SetSelectedTemplate"/>
                                <h:InvokeCommandAction Command="{x:Static h:GitTopContainer.CoverHideCommand}"/>
                            </h:EventTrigger>
                        </h:Interaction.Triggers>
                    </ListBox>
                </GroupBox>
            </StackPanel>
        </h:GitTopItem>

        <!--<Grid Height="60" VerticalAlignment="Top">
        </Grid>-->
        <Grid Height="60" VerticalAlignment="Top" Opacity="0.3">
            <ProgressBar x:Name="pg" Style="{StaticResource S.ProgressBar.Handy.Default}" Background="{DynamicResource S.Brush.White.Opactiy.3}" Height="Auto" Value="{Binding Percent}">
                <!--<ProgressBar.Triggers>
                    <EventTrigger RoutedEvent="Loaded">
                        <BeginStoryboard>
                            <Storyboard RepeatBehavior="Forever">
                                <DoubleAnimation From="0" To="100" Duration="00:00:10" Storyboard.TargetProperty="Value"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ProgressBar.Triggers>-->
            </ProgressBar>
        </Grid>
    </h:GitTopContainer>

 
</h:MenuWindowBase>
